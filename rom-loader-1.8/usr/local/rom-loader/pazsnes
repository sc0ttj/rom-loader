#!/bin/sh

###### initial setup vars and cli interface #####
{
# enable joypad rom browsing
rejoystick1cc --load --profile romloader &>/dev/null
rejoystick2cc --load --profile romloader &>/dev/null

#get settigns for this gui
export WORKDIR=$HOME/.paloader/tmp
export CONFIG=$HOME/.paloader/pazsnesrc
# set some vars as defaults for pazsnes command line interface
export FULLGUI=''
export FSGUI=''
export FULLSCREENGUI='';
export DECORATED='decorated="true"'

##
# for the build_chooser function, used by this script to browse files and dirs
export EXT_LIST="\.zip$|\.smc$|\.swc$|\.sfc$|\.bin$|\.fig$|\.usa$|\.eur$|\.jap$"  # goes in a `grep -iE "$EXT_LIST"` command to filter out unwanted filetypes in build_chooser_list, keep only those listed
# get the guiname .. can use it to create game specific configs for each backend
export SELF="`basename "$0"`"
# $SYSTEM is used by func_build_chooser_list to choose the correct pupromdb file and descr dir
SYSTEM="`cat /root/.paloader/rclist.txt |grep -m1 \"|${SELF}$\" |cut -f1 -d'|'`" #example: snes or atari2600 or pce
#now we need to make it upper case
export SYSTEM="${SYSTEM^^}" # ... note "${SYSTEM,,}" would force lower case
export ROMFILE='' # the file to load up on program start
export ROMICON='cartridge_snes' # the icon file in /usr/share/pixmaps/ to use for this system

# set command line options
while [ $# != 0 ]; do
   I=1
   while [ $I -le `echo $# | wc -c` ]; do
      case $1 in
         -rom) [ -f "$2" ] && ROMFILE="$2" || ROMFILE='' ;;
         -fgui) FULLGUI="true";;
         -f|--fullscreen) FSGUI="-f "; FULLSCREENGUI="--class=jwm-maximized"; DECORATED="decorated=\"false\"";;
         -v|--version)echo "pazsnes $VERSION"; exit;;
         -h|--help)
echo 'Usage: pazsnes [OPTION] [FILE]

[FILE] can be any valid ROM file. Needs the full path.

Options
  -romfile	Load up the given rom on program startup (give full path)
  -f    	Start the rom loader GUI in fullscreen
  -h   		Show this help message'; exit;;
         #if the given option is a file, assign to $ROMFILE, we will autoload it
         *) [ -f "$1" ] && ROMFILE="$1";;
      esac
      shift
      I=$[$I+1]
   done
done

}

######  load config file or defaults #####
{
#check if config exists
if [ ! -f $CONFIG ]; then #no config - set default values
	mkdir -p $WORKDIR 2> /dev/null
	DIR="$HOME" #default browser dir
	ZSNESGUI=No
	AUTOPATCH=Default
	ROMINFO=Default
	KEEPASPECTRATIO=Default
	VIDMODE=8 #800x600, fullscreen, stretched to fit
	INTERPOLATION=Default
	FILTER=Default
	NTSCFILTER=Default
	BILINEAR=Default
	SCANLINES=Default
	SOUND=Yes
	TAGS=''
else
	. $CONFIG #read config file
fi

#get settings from main rom loader settings file, for theme settings and other stuff
export RCFILE=$HOME/.paloader/paloader.cfg
if [ -f "$RCFILE" ];then
	 . "$RCFILE"
fi
}

#####     F U N C T I O N S     ######
{
set -a #export all functions

# get rom loader functions
. /usr/local/rom-loader/func/func_get_resolution 			#get screen res
. /usr/local/rom-loader/func/func_set_theme					# adjust font sizes based on screen res
. /usr/local/rom-loader/func/func_sanitise_romname		# clean up rom names to be searchable
. /usr/local/rom-loader/func/func_build_chooser_list 		# needs SYSTEM and EXT_LIST set & exported near top of this file
. /usr/local/rom-loader/func/func_browser_go_to_dir		# file browsing
. /usr/local/rom-loader/func/func_browser_change_dir	# file browsing
. /usr/local/rom-loader/func/func_set_custom_config	# get the custom cfg for the current rom
. /usr/local/rom-loader/func/func_popup							# popup dialog when user lodas up a rom
. /usr/local/rom-loader/func/func_file_check 					# set boxart ($IMG_FILE), desc file,
. /usr/local/rom-loader/func/func_set_gui_height			# fill screen height
. /usr/local/rom-loader/func/func_kill_rejoystick				# a nicer way to end joypad navigation control
#for bottom panel
. /usr/local/rom-loader/func/func_get_rom_descr 			# needs $CHOOSER, sets $desc_file
. /usr/local/rom-loader/func/func_set_rom_descr 			# needs $DIR$CHOOSER and $desc_file
. /usr/local/rom-loader/func/func_edit_rom_details 		#needs $romname
. /usr/local/rom-loader/func/func_get_rom_boxart 		#needs $romname, sets $IMG_FILE
. /usr/local/rom-loader/func/func_set_rom_boxart 		#needs $IMG_FILE

write_config () {
	#write all variable values to config file
	echo '#pazsnes config file' > $CONFIG
	echo DIR="\"$DIR\""	 >> $CONFIG
	echo ZSNESGUI="$ZSNESGUI" >> $CONFIG
	echo AUTOPATCH="$AUTOPATCH" >> $CONFIG
	echo ROMINFO="$ROMINFO" >> $CONFIG
	echo KEEPASPECTRATIO="$KEEPASPECTRATIO" >> $CONFIG
	echo VIDMODE="$VIDMODE" >> $CONFIG
	echo INTERPOLATION="$INTERPOLATION" >> $CONFIG
	echo FILTER="$FILTER" >> $CONFIG  #NONE, 2xSaI, Super Eagle, Super 2xSaI, HQ2x, HQ3x, HQ4
	echo NTSCFILTER="$NTSCFILTER" >> $CONFIG
	echo BILINEAR="$BILINEAR" >> $CONFIG
	echo SCANLINES="$SCANLINES" >> $CONFIG
	echo SOUND="$SOUND" >> $CONFIG
	echo TAGS="\"$TAGS\"" >> $CONFIG
	
	# here, we do 2 things: we get the custom config for any backends NOT being used, 
	# starting with first in list, goind down (see backend menus in Settings page), 
	# if a cfg for a non-enabled backend exists, that backend is used to auto load the rom with those custom settings
	# if no custom configs exist for non used backends, get the custom config for the currently enabled backend
	# we do this so users can set custom settings AND emulators for each ROM..
	set_custom_config
	
	if [ "$AUTOPATCH" = "No" ];then
		sed -i 's/AutoPatch=1/AutoPatch=0/' /root/.zsnes/zsnesl.cfg
	elif [ "$AUTOPATCH" = "Yes" ];then
		sed -i 's/AutoPatch=0/AutoPatch=1/' /root/.zsnes/zsnesl.cfg
	fi
	

	if [ "$ROMINFO" = "No" ];then
		sed -i 's/DisplayInfo=1/DisplayInfo=0/' /root/.zsnes/zsnesl.cfg
	elif [ "$ROMINFO" = "Yes" ];then
		sed -i 's/DisplayInfo=1/DisplayInfo=0/' /root/.zsnes/zsnesl.cfg
	fi
	
	#keep aspect ratio
	if [ "$KEEPASPECTRATIO" = "No" ];then
		sed -i 's/Keep4_3Ratio=1/Keep4_3Ratio=0/' /root/.zsnes/zsnesl.cfg
	elif [ "$KEEPASPECTRATIO" = "Yes" ];then
		sed -i 's/Keep4_3Ratio=0/Keep4_3Ratio=1/' /root/.zsnes/zsnesl.cfg
	fi
	
	#get old video mode
	OLDVIDMODE=`grep -w 'cvidmode' /root/.zsnes/zsnesl.cfg | cut -f2 -d'='`
	#update config file, video mode
	sed -i "s/cvidmode=$OLDVIDMODE/cvidmode=$VIDMODE/" /root/.zsnes/zsnesl.cfg

	if [ "$INTERPOLATION" = "No" ];then
		sed -i 's/antienab=1/antienab=0/' /root/.zsnes/zsnesl.cfg
	elif [ "$INTERPOLATION" = "Yes" ];then
		sed -i 's/antienab=0/antienab=1/' /root/.zsnes/zsnesl.cfg
	fi

	#get old filter
	OLDKREED=`grep -w 'En2xSaI' /root/.zsnes/zsnesl.cfg | cut -f2 -d'='`
	OLDHQFILTER=`grep -w 'hqFilter' /root/.zsnes/zsnesl.cfg | cut -f2 -d'='`
	OLDHQFILTERLEVEL=`grep -w 'hqFilterlevel' /root/.zsnes/zsnesl.cfg | cut -f2 -d'='`
	#now setup each var related to the filter option chosen in romloader
	case $FILTER in
	None|Default) KREED=0; HQFILTER=0; HQFILTERLEVEL=2
			;;
	#kreed filters
	2xSaI) KREED=1; HQFILTER=0; HQFILTERLEVEL=2
			;;
	Super*Eagle) KREED=2; HQFILTER=0; HQFILTERLEVEL=2
			;;
	Super*2xSaI) KREED=3; HQFILTER=0; HQFILTERLEVEL=2
			;;
	#HQx filters
	HQ2x)	KREED=0; HQFILTER=1; HQFILTERLEVEL=2
			;;
	HQ3x)	KREED=0; HQFILTER=1; HQFILTERLEVEL=3
			;;
	HQ4x)	KREED=0; HQFILTER=1; HQFILTERLEVEL=4
			;;
	esac
	#update config file, filter
	sed -i "s/En2xSaI=$OLDKREED/En2xSaI=$KREED/" /root/.zsnes/zsnesl.cfg
	sed -i "s/hqFilter=$OLDHQFILTER/hqFilter=$HQFILTER/" /root/.zsnes/zsnesl.cfg
	sed -i "s/hqFilterlevel=$OLDHQFILTERLEVEL/hqFilterlevel=$HQFILTERLEVEL/" /root/.zsnes/zsnesl.cfg

	if [ "$NTSCFILTER" = "No" ];then
		sed -i 's/NTSCFilter=1/NTSCFilter=0/' /root/.zsnes/zsnesl.cfg
	elif [ "$NTSCFILTER" = "Yes" ];then
		sed -i 's/NTSCFilter=0/NTSCFilter=1/' /root/.zsnes/zsnesl.cfg
	fi

	if [ "$BILINEAR" = "No" ];then
		sed -i 's/BilinearFilter=1/BilinearFilter=0/' /root/.zsnes/zsnesl.cfg
	elif [ "$BILINEAR" = "Yes" ];then
		sed -i 's/BilinearFilter=0/BilinearFilter=1/' /root/.zsnes/zsnesl.cfg
	fi

	if [ "$SCANLINES" = "No" ];then
		sed -i 's/scanlines=1/scanlines=0/' /root/.zsnes/zsnesl.cfg
	elif [ "$SCANLINES" = "Yes" ];then
		sed -i 's/scanlines=0/scanlines=1/' /root/.zsnes/zsnesl.cfg
	fi

	if [ "$SOUND" = "No" ];then
		sed -i 's/soundon=1/soundon=0/' /root/.zsnes/zsnesl.cfg
	elif [ "$SOUND" = "Yes" ];then
		sed -i 's/soundon=0/soundon=1/' /root/.zsnes/zsnesl.cfg
	fi

}

execute (){
	export GTK2_RC_FILES="$HOME/.gtkrc-2.0"	#reset gtk-theme
	
	write_config #keep settings for next startup/next game, write to config file

	C=''
	[ "$ZSNESGUI" = "No" ] && C="-m"
	
	# enable joypad rom browsing
	rejoystick1cc --load --profile zsnes &>/dev/null
	rejoystick2cc --load --profile zsnes &>/dev/null
	unclutter -idle 1 -jitter 6 -reset -root &
	
	#this is the actual command
	mkdir -p /tmp/paloader
	echo "zsnes $C $TAGS \"${DIR}${CHOOSER}\"" > /tmp/paloader/${SELF}_cmd
	. /tmp/paloader/${SELF}_cmd &> /tmp/paloader/${SELF}_cmd_output
	
	# enable joypad rom browsing
	rejoystick1cc --load --profile romloader &>/dev/null
	rejoystick2cc --load --profile romloader &>/dev/null
	killall -9 unclutter &>/dev/null

}

}

#####     P R O G R A M     ######
{

#define default directory in browser
echo "$DIR" > $WORKDIR/dir
ls -1p --group-directories-first "$DIR" > $WORKDIR/ls
browser_go_to_dir

#set default text in info-field
echo 'Select a valid ROM in the browser and execute' > $WORKDIR/info
# set the default puppy arcade box art
rm /root/.paloader/tmp/boxart.jpg &>/dev/null
ln -s /usr/share/paloader/romlists/boxart/default.jpg /root/.paloader/tmp/boxart.jpg

# set the height to full height of screen if run with -if/--fullscreen
set_gui_height

#define a unique gtk-theme. This can be built really fancy. See /usr/share/themes/DeepThought/gtk-2.0/gtkrc.
#Pmusic and Pburn uses this tecnique
cat "/root/.paloader/themes/${SNES_THEME:-$MAIN_THEME}" > /tmp/gtkrc

#get the screen res .. this will also set TITLESIZE and SUBTITELSIZE, 
# which are font sizes we update on the fly in theme files
get_resolution 
#now we update the font sizes based on current resolution
# set_theme will replace the font sizes in /tmp/gtkrc and then set the theme
set_theme

# auto run the given rom ($ROMFILE)
if [ -f "$ROMFILE" ];then #if rom was given
	# set the required vars to locate the rom
	export DIR="`dirname \"$ROMFILE\"`/"
	export CHOOSER="`basename \"$ROMFILE\"`"
	# load up the rom
	execute
	kill_rejoystick
	exit
fi

}

###### build gui #####
{
# get all arrays for combobox items
. /usr/local/rom-loader/combobox_arrays/`basename $0`

# create the file browsing gui stuff ... do it here cos gui_height and so has to be set first...
. /usr/local/rom-loader/func/func_build_chooser_gui
# usage:  build_chooser_gui $boxart_width $boxart_height
build_chooser_gui 280 200

#main gui
S='<window title="Puppy Arcade - SNES loader (zsnes)" icon-name="gtk-execute" '$DECORATED' width-request="'$SCREEN_WIDTH'" height-request="'$SCREEN_HEIGHT'">
 <vbox>
  <notebook labels="ROMs|Settings|Help">

## E X E C U T E

 '$CHOOSER_GUI'

## S E T T I N G S

<vbox>
	<frame>

		<frame System Options>

			<hbox>
				<text height-request="5"><label>""</label></text>
				<text><label>Enable GUI:</label></text>
				<combobox tooltip-text="If enabled, pressing ESCAPE will load up the ZSNES main menu. If disabled, pressing ESCAPE will end emulation and return straight back to rom-loader" width-request="120">
					<variable>ZSNESGUI</variable>
					'$ZSNESGUI_ITEMS'
				</combobox>
				<text width-request="30"><label>""</label></text>
			</hbox>
			
			<hbox>
				<text><label>Auto IPS Patch:</label></text>
				<combobox tooltip-text="If enabled, this will auto apply any IPS files that you have for the ROM you are loading.. This is useful for playing hacked roms, or adding patches to roms." width-request="120">
					<variable>AUTOPATCH</variable>
					'$AUTOPATCH_ITEMS'
				</combobox>
				<text height-request="5"><label>""</label></text>
				<text><label>ROM info at startup:</label></text>
				<combobox tooltip-text="Display ROM info when it first load up or not" width-request="120">
					<variable>ROMINFO</variable>
					'$ROMINFO_ITEMS'
				</combobox>
				<text width-request="30"><label>""</label></text>
			</hbox>

			<hbox>
				<text><label>Video Mode (see tooltip):</label></text>
				<combobox width-request="120" tooltip-text="Choose from the following:

R=keep 8:7 aspect ratio
D=filters allowed
O=opengl required/enabled
S=stretch to fill screen
FULL=fullscreen,    WIN=windowed

0 = 256x224      R WIN     1 = 256x224      R FULL
2 = 512x448     DR WIN     3 = 512x448     DR FULL
4 = 640x480     DR FULL   5 = 256x224    O R WIN
6 = 512x448    ODR WIN    7 = 640x480    ODS FULL
8 = 640x480    ODS WIN    9 = 640x560    ODR WIN
10 = 768x672    ODR WIN    11 = 800x600    ODS FULL
12 = 800x600    ODS WIN     13 = 896x784    ODR WIN
14 = 1024x768   ODS FULL    15 = 1024x768   ODS WIN
16 = 1024x896   ODR WIN    17 = 1280x960   ODS FULL
18 = 1280x1024  ODS FULL    19 = 1600x1200  ODS FULL
">
					<variable>VIDMODE</variable>
					'$VIDMODE_ITEMS'
				</combobox>
				<text width-request="30"><label>""</label></text>
			</hbox>

			<hbox>
				<text><label>Keep Aspect Ratio:</label></text>
				<combobox tooltip-text="Keep the original 8:7 aspect ratio (screen proportions)" width-request="120">
					<variable>KEEPASPECTRATIO</variable>
					'$KEEPASPECTRATIO_ITEMS'
				</combobox>
				<text width-request="5"><label>""</label></text>

				<text><label>Interpolation:</label></text>
				<combobox tooltip-text="combines frames or sprites or something, to reduce flickers and pixelation, causes some blur." width-request="120">
					<variable>INTERPOLATION</variable>
					'$INTERPOLATION_ITEMS'
				</combobox>
				<text width-request="30"><label>""</label></text>
			</hbox>

			<text height-request="5"><label>""</label></text>
			<hbox>
				<text><label>Graphics filter:</label></text>
				<combobox tooltip-text="Choose a graphics filter. None is the fastest, NTSC emulates a kind of TV effect." width-request="120">
					<variable>FILTER</variable>
					'$FILTER_ITEMS'
				</combobox>
				<text><label>Bilinear Filtering:</label></text>
				<combobox tooltip-text="This requires OpenGL and replaces interpolation, if it is enabled." width-request="120">
					<variable>BILINEAR</variable>
					'$BILINEAR_ITEMS'
				</combobox>
				<text width-request="30"><label>""</label></text>
			</hbox>

			<text height-request="5"><label>""</label></text>
			<hbox>
			<text><label>NTSC filter:</label></text>
			<combobox tooltip-text="NTSC emulates a kind of TV effect, " width-request="120">
			<variable>NTSCFILTER</variable>
				'$NTSCFILTER_ITEMS'
			</combobox>
			<text><label>Scanlines:</label></text>
			<combobox tooltip-text="This requires is compatible with the NTSC filter (most filters cannot be combined) " width-request="120">
			<variable>SCANLINES</variable>
				'$SCANLINES_ITEMS'
			</combobox>
			<text width-request="30"><label>""</label></text>
			</hbox>

		</frame>
		
		<frame SOUND OPTIONS>

			<hbox>
			<checkbox>
			<label>Enable Sound</label>
			<variable>SOUND</variable>
			<default>"'$SOUND'"</default>
			</checkbox>
			<text width-request="30"><label>""</label></text>
			</hbox>

		</frame>
		
		<frame OTHER OPTIONS>

			<hbox>
				<text><label>"Custom options"</label></text>
				<entry editable="true" left_margin="10">
				<variable>TAGS</variable>
				<default>"'$TAGS'"</default>
				</entry>
				<text width-request="30"><label>""</label></text>
			</hbox>
		
		</frame>

	</frame>

</vbox>

## H E L P
  <vbox>
	<edit can-focus="no" editable="false" indent="15">
		<variable>EDITOR</variable>
		<width>350</width><height>150</height>
		<default>"ZSNES Help:
=======================
ZSNES Controls:

Emulator controls:

F12		Quit
ESCAPE	Show/hide the menu

----------------------------------

Player 1

W,S,A,D		up, down, left, right
B			B button
N			A button
V			Y button
G			X button
C			L button
M			R button
Enter		Start button
R_Shift		Select button

----------------------------------
Player 2

Cursor keys	up, down, left, right
(all keys below on numpad)
2			B button
3			A button
1			Y button
5			X button
4			L button
6			R button
Enter		Start button
Plus		Select button


All settings can be configured through the menu

The settings are saved in /root/.zsnes/zsnesl.cfg"</default>
	</edit>		
  </vbox>

 </notebook>

## B U T T O N S

	<hbox height-request="30">
		<button use-stock="true" label="gtk-save" tootlip-text="Save your emulator settings">
			<variable>SAVE_SETTINGS</variable>
			<action>write_config; Xdialog --title "Settings Saved" --msgbox "Settings saved to $CONFIG" 0 0</action>
		</button>
		<button use-stock="true" label="gtk-help" tooltip-text="View all usage options for this emulator">
		    <action>defaulttexteditor /usr/share/doc/snes/readme.txt &</action>	
		</button>
		<button use-stock="true" label="gtk-quit" tooltip-text="Exit this frontend">
			<action>if [ "$FULLGUI" != "" ];then exec paloader -sk '$FSGUI' & sleep 0.6; fi</action>
			<action type="exit">EXIT_NOW</action>
		</button>
	</hbox>
 </vbox>
</window>'
}

### run gui ####
export pazsnes="`echo "$S" | sed -e 's/##.*//'`"  #I use double hash (##) for comments. Colors are defined as #FF0000
gtkdialog -p pazsnes $FULLSCREENGUI # $FULLSCREENGUI contains (or not) --class=jwm-maximized and must be defined in jwm configuration to get window maximized
unset pazsnes

# if NOT returning to the main menu ($FULLGUI=""), remove the rejoystick profile.. kill it to be safe... 
# and then we must use xdotool to quit the output of the joypad when rejoystick exits.. 
# if we dont do this, rejoystick/the joypad floods the next process/app/etc with a load of keypresses
if [ "$FULLGUI" = "" ];then
	kill_rejoystick
fi

exit 0
