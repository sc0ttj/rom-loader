#!/bin/sh

# enable joypad rom browsing
rejoystick1cc --load --profile romloader &>/dev/null
rejoystick2cc --load --profile romloader &>/dev/null

#make some shortcuts. Most for easy typing, but also for flexibility
export WORKDIR=$HOME/.paloader/tmp
export CONFIG=$HOME/.paloader/panesrc
# set some vars as defaults
export FULLGUI=''
export FSGUI=''
export FULLSCREENGUI='';
export DECORATED='decorated="true"'

##
# for the build_chooser function, used by this script to browse files and dirs
export EXT_LIST="\.zip$|\.nes$|\.fds$"  # goes in a `grep -iE "$EXT_LIST"` command to filter out unwanted filetypes in build_chooser_list, keep only those listed
# get the guiname .. can use it to create game specific configs for each backend
export SELF="`basename "$0"`"
# $SYSTEM is used by func_build_chooser_list to choose the correct pupromdb file and descr dir
SYSTEM="`cat /root/.paloader/rclist.txt |grep -m1 \"|${SELF}$\" |cut -f1 -d'|'`" #example: snes or atari2600 or pce
#now we need to make it upper case
export SYSTEM="${SYSTEM^^}" # ... note "${SYSTEM,,}" would force lower case
export ROMFILE='' # the file to load up on program start
export ROMICON='cartridge_nes' # the icon file in /usr/share/pixmaps/ to use for this system

# set command line options
while [ $# != 0 ]; do
   I=1
   while [ $I -le `echo $# | wc -c` ]; do
      case $1 in
         -rom) [ -f "$2" ] && ROMFILE="$2" || ROMFILE='' ;;
         -fgui) FULLGUI="true";;
         -f|--fullscreen) FSGUI="-f "; FULLSCREENGUI="--class=jwm-maximized"; DECORATED="decorated=\"false\"";;
         -v|--version)echo "PAnes $VERSION"; exit;;
         -h|--help)
echo 'Usage: panes [OPTION]

Options
  -romfile	    Load up the given rom on program startup (give full path)
  -f    Start the rom loader GUI in fullscreen
  -h    Show this help message'; exit;;
         #if the given option is a file, assign to $ROMFILE, we will autoload it
         *) [ -f "$1" ] && ROMFILE="$1";;
      esac
      shift
      I=$[$I+1]
   done
done

#check if config exists
if [ ! -f $CONFIG ]; then #no config - set default values
	mkdir -p $WORKDIR 2> /dev/null
	DIR=$HOME #default browser dir
	FULL=true
	RES="640x480"
	SCALE="x2"
	FX="None"
	DBUF=false
	NTSCCOL=false
	BPP="Default"
	DRI=false
	INTERPOL=false
	STRETCH=false
	CONTROL="Default"
	SERVER=""
	PORT=""
	PASS=""
	NICK=""
	GAMEKEY=""
	LOCALS="1"
	WORD1=""
else
	. $CONFIG #read config file
fi

#get settings from main rom loader settings file, for theme settings and other stuff
export RCFILE=$HOME/.paloader/paloader.cfg
if [ -f "$RCFILE" ];then
	 . "$RCFILE"
fi

#####     F U N C T I O N S     ######

set -a #export all functions

# get rom loader functions
. /usr/local/rom-loader/func/func_get_resolution 			#get screen res
. /usr/local/rom-loader/func/func_set_theme					# adjust font sizes based on screen res
. /usr/local/rom-loader/func/func_sanitise_romname		# clean up rom names to be searchable
. /usr/local/rom-loader/func/func_build_chooser_list 		# needs SYSTEM and EXT_LIST set & exported near top of this file
. /usr/local/rom-loader/func/func_browser_go_to_dir		# file browsing
. /usr/local/rom-loader/func/func_browser_change_dir	# file browsing
. /usr/local/rom-loader/func/func_set_custom_config	# get the custom cfg for the current rom
. /usr/local/rom-loader/func/func_popup							# popup dialog when user lodas up a rom
. /usr/local/rom-loader/func/func_file_check 					# set boxart ($IMG_FILE), desc file,
. /usr/local/rom-loader/func/func_set_gui_height			# fill screen height
. /usr/local/rom-loader/func/func_kill_rejoystick				# a nicer way to end joypad navigation control
#for bottom panel
. /usr/local/rom-loader/func/func_get_rom_descr 			# needs $CHOOSER, sets $desc_file
. /usr/local/rom-loader/func/func_set_rom_descr 			# needs $DIR$CHOOSER and $desc_file
. /usr/local/rom-loader/func/func_edit_rom_details 		#needs $romname
. /usr/local/rom-loader/func/func_get_rom_boxart 		#needs $romname, sets $IMG_FILE
. /usr/local/rom-loader/func/func_set_rom_boxart 		#needs $IMG_FILE

write_config () {
	#write all variable values to config file
	echo '#PAnes config file' > $CONFIG
	echo DIR="\"$DIR\""	 >> $CONFIG
	echo FULL=$FULL >> $CONFIG
	echo RES=$RES >> $CONFIG
	echo SCALE=$SCALE >> $CONFIG
	echo FX=$FX >> $CONFIG
	echo DBUF=$DBUF >> $CONFIG
	echo NTSCCOL=$NTSCCOL >> $CONFIG
	echo BPP=$BPP >> $CONFIG
	echo DRI=$DRI >> $CONFIG
	echo INTERPOL=$INTERPOL >> $CONFIG
	echo STRETCH=$STRETCH >> $CONFIG
	echo CONTROL=$CONTROL >> $CONFIG
	echo SERVER=$SERVER >> $CONFIG
	echo PORT=$PORT >> $CONFIG
	echo PASS=$PASS >> $CONFIG
	echo NICK=$NICK >> $CONFIG
	echo GAMEKEY=$GAMEKEY >> $CONFIG
	echo LOCALS=$LOCALS >> $CONFIG
	echo WORD1="\"$WORD1\"" >> $CONFIG

	# here, we do 2 things: we get the custom config for any backends NOT being used, 
	# starting with first in list, goind down (see backend menus in Settings page), 
	# if a cfg for a non-enabled backend exists, that backend is used to auto load the rom with those custom settings
	# if no custom configs exist for non used backends, get the custom config for the currently enabled backend
	# we do this so users can set custom settings AND emulators for each ROM..
	set_custom_config
	
}

execute (){
	export GTK2_RC_FILES="$HOME/.gtkrc-2.0"	#reset gtk-theme
	write_config #keep settings for next startup

	# set fullscreen
	if [ "$FULL" = true ];then
		C="-fs 1"
	else
		C="-fs 0"
	fi

	# set graphics scale
	if [ "$SCALE" = "2x" ];then
	  C="$C -xscale 2 -yscale 2 -xscalefs 2 -yscalefs 2"
	elif [ "$SCALE" = "3x" ];then
	  C="$C -xscale 3 -yscale 3 -xscalefs 3 -yscalefs 3"
	elif [ "$SCALE" = "4x" ];then
	  C="$C -xscale 4 -yscale 4 -xscalefs 4 -yscalefs 4"
	else
	  C="$C -xscale 1 -yscale 1 -xscalefs 1 -yscalefs 1"
	fi

	# set stretch
	if [ "$STRETCH" = true ];then
		C="$C -stretchx 1 -stretchy 1"
	else
		C="$C -stretchx 0 -stretchy 0"
	fi

	# set resolutions
	if [ "$RES" = "320x200" ];then
	  C="$C -xres 320 -yres 200"
	elif [ "$RES" = "320x240" ];then
	  C="$C -xres 320 -yres 240"
	elif [ "$RES" = "640x400" ];then
	  C="$C -xres 640 -yres 400"
	elif [ "$RES" = "640x480" ];then
	  C="$C -xres 640 -yres 480"
	elif [ "$RES" = "800x600" ];then
	  C="$C -xres 800 -yres 600"
	elif [ "$RES" = "960x600" ];then
	  C="$C -xres 960 -yres 600"
	elif [ "$RES" = "1024x768" ];then
	  C="$C -xres 1024 -yres 768"
	elif [ "$RES" = "1280x800" ];then
	  C="$C -xres 1280 -yres 800"
	elif [ "$RES" = "1280x960" ];then
	  C="$C -xres 1280 -yres 960"
	else
	  C="$C -xres 640 -yres 480"
	fi

# set graphics effects
	if [ "$FX" = "Scanlines" ];then
	  C="$C -efx 1"
	elif [ "$FX" = "TV" ];then
	  C="$C -efx 2 "
	elif [ "$FX" = "TV+Scanlines" ];then
	  C="$C -efx 1 -efx 2"
	else
	  C="$C"
	fi

	# set double buffering
	if [ "$DBUF" = true ];then
	  C="$C -doublebuf 1"
	else
	  C="$C -doublebuf 0"
	fi

	# set ntsc colours
	if [ "$NTSCCOL" = true ];then
	  C="$C -ntsccol 1"
	else
	  C="$C -ntsccol 0"
	fi

	# set bits per pixel
	if [ "$BPP" = "8" ];then
	  C="$C -bpp 8"
	elif [ "$BPP" = "16" ];then
	  C="$C -bpp 16 "
	elif [ "$BPP" = "32" ];then
	  C="$C -bpp 32"
	else
	  C="$C"
	fi

	# set opengl
	if [ "$DRI" = true ];then
		C="$C -opengl 1"
	else
	  C="$C -opengl 0"
	fi

	# set opengl interpolation
	if [ "$INTERPOL" = true ];then
	  C="$C -openglip 1"
	else
	  C="$C -openglip 0"
	fi

	# set controller type
	if [ "$CONTROL" = "Zapper" ];then
	  C="$C -inputx  zapper"
	elif [ "$CONTROL" = "Arkanoid" ];then
	  C="$C -inputx  arkanoid"
	elif [ "$CONTROL" = "PowerPad-A" ];then
	  C="$C -inputx  powerpada"
	elif [ "$CONTROL" = "PowerPad-B" ];then
	  C="$C -inputx  powerpadb"
	else
	  C="$C -inputx  gamepad"
	fi

	# network - online multiplayer settings
	if [  -n "$SERVER" ];then
		C = "$C -connect $SERVER"
	fi
	if [  -n "$PORT" ];then
		C = " -netport $PORT"
	fi
	if [  -n "$PASSWORD" ];then
		C = "$C -netpassword $PASSWORD"
	fi
	if [  -n "$GAMEKEY" ];then
		C = "$C -netgamekey $GAMEKEY"
	fi
	if [  -n "$NICK" ];then
		C = "$C -netnick $NICK"
	fi
	if [  -n "$LOCALS" ];then
		C = "$C -netlocalplayers $LOCALS"
	fi

	# enable joypad support
	rejoystick1cc --load --profile fceu &>/dev/null
	rejoystick2cc --load --profile fceu &>/dev/null
	unclutter -idle 1 -jitter 6 -reset -root &

	# THE ACTUAL, FINAL COMMAND
	mkdir -p /tmp/paloader
	echo "fceu $C $WORD1 \"$DIR$CHOOSER\""  > /tmp/paloader/${SELF}_cmd
	. /tmp/paloader/${SELF}_cmd &> /tmp/paloader/${SELF}_cmd_output
	
	# enable joypad rom browsing
	rejoystick1cc --load --profile romloader &>/dev/null
	rejoystick2cc --load --profile romloader &>/dev/null
	killall -9 unclutter &>/dev/null

}

#####     P R O G R A M     ######


#define default directory in browser
echo "$DIR" > $WORKDIR/dir
ls -1p --group-directories-first "$DIR" > $WORKDIR/ls
browser_go_to_dir

#set default text in info-field
echo 'Select a valid ROM in the browser and execute' > $WORKDIR/info
# set the default puppy arcade box art
rm /root/.paloader/tmp/boxart.jpg &>/dev/null
ln -s /usr/share/paloader/romlists/boxart/default.jpg /root/.paloader/tmp/boxart.jpg

# set the height to full height of screen if run with -if/--fullscreen
set_gui_height

#define a unique gtk-theme. This can be built really fancy. See /usr/share/themes/DeepThought/gtk-2.0/gtkrc.
#Pmusic and Pburn uses this tecnique
cat "/root/.paloader/themes/${NES_THEME:-$MAIN_THEME}" > /tmp/gtkrc

#get the screen res .. this will also set TITLESIZE and SUBTITELSIZE, 
# which are font sizes we update on the fly in theme files
get_resolution 
#now we update the font sizes based on current resolution
# set_theme will replace the font sizes in /tmp/gtkrc and then set the theme
set_theme

# auto run the given rom ($ROMFILE)
if [ -f "$ROMFILE" ];then #if rom was given
	# set the required vars to locate the rom
	export DIR="`dirname \"$ROMFILE\"`/"
	export CHOOSER="`basename \"$ROMFILE\"`"
	# load up the rom
	execute
	kill_rejoystick
	exit
fi

# get all arrays for combobox items
. /usr/local/rom-loader/combobox_arrays/`basename $0`

# create the file browsing gui stuff ... do it here cos gui_height and so has to be set first...
. /usr/local/rom-loader/func/func_build_chooser_gui
# usage:  build_chooser_gui $boxart_width $boxart_height
build_chooser_gui 280 200

#build gui
S='
<window title="Puppy Arcade - NES loader" icon-name="gtk-execute" '$DECORATED' width-request="'$SCREEN_WIDTH'" height-request="'$SCREEN_HEIGHT'">
 <vbox>
  <notebook labels="Execute|Settings|Help">


## E X E C U T E

 '$CHOOSER_GUI'

## S E T T I N G S

	<vbox>

	<frame>

	<notebook labels="General|Advanced|Network">
	<frame>

	<frame Display Options>

		<hbox>
		<text>
			<label>Display Modes:</label>
		</text>
		   <checkbox tooltip-text="Enable fullscreen display">
			  <label>Fullscreen</label>
			  <variable>FULL</variable>
			  <default>"'$FULL'"</default>
		  </checkbox>
		</hbox>
		<hbox>
		<text>
			<label>Resolution:</label>
		</text>
			<combobox  width-request="225">
			 <variable>RES</variable>
			 '$RES_ITEMS'
			</combobox>
		 </hbox>

	</frame>

	<frame Display Filters:>
		<hbox>
		<text>
			<label>Scale:</label>
		</text>
		<combobox width-request="300">
			<variable>SCALE</variable>
			 '$SCALE_ITEMS'
		</combobox>
		</hbox>
		<hbox>
			<text>
				<label>Effects:</label>
			</text>
			<combobox  width-request="300">
				 <variable>FX</variable>
				 '$FX_ITEMS'
			</combobox>
		</hbox>
		<hbox>
		   <checkbox tooltip-text="Enable double-buffering">
			  <label>Double-Buffering</label>
			  <variable>DBUF</variable>
				<default>"'$DBUF'"</default>
		  </checkbox>
		   <checkbox tooltip-text="Enable NTSC colours">
			  <label>NTSC Colours</label>
			  <variable>NTSCCOL</variable>
     		  <default>"'$NTSCCOL'"</default>
		  </checkbox>
		</hbox>
	</frame>
	</frame>

	<frame>
	<frame More Display Options>
		<hbox>
		<text>
			<label>Bits-per-pixel:</label>
		</text>
		<combobox  width-request="260">
			<variable>BPP</variable>
			 '$BPP_ITEMS'
		</combobox>
		</hbox>
	</frame>

	<frame Enable OpenGL>
		<hbox>
		   <checkbox tooltip-text="Enable OpenGL">
			  <label>Enable OpenGL</label>
			  <variable>DRI</variable>
			  <action>if true enable:STRETCH</action>
			  <action>if false disable:STRETCH</action>
			  <action>if true enable:INTERPOL</action>
			  <action>if false disable:INTERPOL</action>
			  <default>"'$DRI'"</default>
		  </checkbox>
		   <checkbox tooltip-text="Stretch display">
			  <label>Stretch Display</label>
			  <variable>STRETCH</variable>
			  <default>"'$STRETCH'"</default>
			  <visible>disabled</visible>
		  </checkbox>
		   <checkbox tooltip-text="Enable Interpolation">
			  <label>Interpolation</label>
			  <variable>INTERPOL</variable>
			  <visible>disabled</visible>
  			<default>"'$INTERPOL'"</default>
		  </checkbox>
	  </hbox>
	</frame>

	<frame Controller Settings>
		<hbox>
			<text>
			<label>Choose Controller:</label>
			</text>
			<combobox width-request="220">
				<variable>CONTROL</variable>
			 '$CONTROL_ITEMS'
			</combobox>   
		</hbox>
	</frame>

	<frame Entry box for custom tags>
		<hbox>
			<entry editable="true">
				<variable>WORD1</variable>
				<default>"'$WORD1'"</default>
			</entry>
			<button tooltip-text="Clear entry box">
			<input file icon="gtk-clear"></input>       
			<action type="clear">WORD1</action>
			<label>Clear</label>
			</button>
		</hbox>
	</frame>

	</frame>

	<frame>
	
		<frame Server Settings>
			<hbox>
				<text>
					<label>Server:</label>
				</text>
				<entry editable="true" width-request="100">
				<variable>SERVER</variable>
				</entry>
			</hbox>
			<hbox>
				<text>
					<label>Port:</label>
				</text>
				<entry editable="true" width-request="10">
				<variable>PORT</variable>
				</entry>
			</hbox>
			<hbox>		
				<text>
					<label>Password:</label>
				</text>
				<entry editable="true">
				<variable>PASS</variable>
				</entry>
			</hbox>
			<hbox>		
				<text>
					<label>Game Key:</label>
				</text>
				<entry editable="true">
				<variable>GAMEKEY</variable>
				</entry>
			</hbox>
		</frame>
		<frame User Settings>
			<hbox>
				<text>
					<label>Nickname:</label>
				</text>
				<entry editable="true">
				<variable>NICK</variable>
				</entry>
			</hbox>
			<hbox>
				<text>
					<label>Local Players:</label>
				</text>
				<combobox>
					<variable>LOCALS</variable>
					<item>1</item>
					<item>2</item>
					<default>"'$LOCALS'"</default>
				</combobox>   
			</hbox>
		</frame>

	</frame>

	</notebook>

	</frame>
	</vbox>

## H E L P

	<vbox>
	<edit can-focus="no" editable="false" indent="15">
		<variable>EDITOR</variable>
		<width>350</width><height>150</height>
		<default>"FCEU Help:
=======================
Player 1 controls:

	W				Up
	A				Left
	S				Down
	D				Right
	V				B
	B				A
	Enter			Start
	RShift			Select

Player 2 controls:

	Up				Up
	Left				Left
	Down			Down
	Right			Right
	Numpad 0		B
	Numpad .		A
	Numpad Enter	Start
	Numpad +		Select

You can change the controls easily, by running 
the following command in a terminal window,
then following the on screen instructions:

	fceu -inputcfg gamepad1 /path/to/rom.nes

Emulator controls:

	F5			Save state.
	F7			Load state.
	0-9			Select save state slot.
	Shift + F5	Record movie.
	Shift + F7	Play movie.
	Shift + 0-9	Select movie slot.
	F9			Save screen snapshot.
	F4			Hide sprites(toggle).
	Shift + F4	Hide bg data w overscan color (toggle).
	Alt + Enter	Toggle fullscreen mode.
	~			Temporarily disable speed throttling.
	F10			Reset.
	F11			Hard reset(toggle power switch).
	F12			Exit.

VS Unisystem:

	Key:	Action:
	F8	Insert coin.
	F6	Show/Hide dip switches.
	1-8	Toggle dip switches

Famicom Disk System

	Key:	Action:
	F6	Select disk and disk side.
	F8	Eject or Insert disk.


More help can be found in /usr/share/doc/fceu
"</default>
	</edit>		
	</vbox>

	</notebook>


## B U T T O N S

	<hbox>
		<button use-stock="true" label="gtk-save" tootlip-text="Save your emulator settings">
			<variable>SAVE_SETTINGS</variable>
			<action>write_config; Xdialog --title "Settings Saved" --msgbox "Settings saved to $CONFIG" 0 0</action>
		</button>
		<button use-stock="true" label="gtk-help" tooltip-text="View all usage options for this emulator">
		    <action>defaultbrowser /usr/share/doc/fceu/fceultra.html &</action>
		</button>
		<button use-stock="true" label="gtk-quit" tooltip-text="Exit this frontend">
			<action>if [ "$FULLGUI" != "" ];then exec paloader -sk '$FSGUI' & fi</action>
			<action type="exit">EXIT_NOW</action>
		</button>
	</hbox>
 </vbox>
</window>'

export panes="`echo "$S" | sed -e 's/##.*//'`"  #I use double hash (##) for comments. Colors are defined as #FF0000
gtkdialog3 -p panes $FULLSCREENGUI # $FULLSCREENGUI contains (or not) --class=jwm-maximized and must be defined in jwm configuration to get window maximized
unset panes

# if NOT returning to the main menu ($FULLGUI=""), remove the rejoystick profile.. kill it to be safe... 
# and then we must use xdotool to quit the output of the joypad when rejoystick exits.. 
# if we dont do this, rejoystick/the joypad floods the next process/app/etc with a load of keypresses
if [ "$FULLGUI" = "" ];then
	kill_rejoystick
fi

exit 0
