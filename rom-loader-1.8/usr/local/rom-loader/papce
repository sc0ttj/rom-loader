#!/bin/sh

# enable joypad rom browsing
rejoystick1cc --load --profile romloader &>/dev/null
rejoystick2cc --load --profile romloader &>/dev/null

#make some shortcuts. Most for easy typing, but also for flexibility
export WORKDIR=$HOME/.paloader/tmp
export CONFIG=$HOME/.paloader/papcerc
# set some vars as defaults
export FULLGUI=''
export FSGUI=''
export FULLSCREENGUI='';
export DECORATED='decorated="true"'

##
# for the build_chooser function, used by this script to browse files and dirs
export EXT_LIST="\.bin$|\.iso$|\.pce$|\.zip$"  # goes in a `grep -iE "$EXT_LIST"` command to filter out unwanted filetypes in build_chooser_list, keep only those listed
# get the guiname .. can use it to create game specific configs for each backend
export SELF="`basename "$0"`"
# $SYSTEM is used by func_build_chooser_list to choose the correct pupromdb file and descr dir
SYSTEM="`cat /root/.paloader/rclist.txt |grep -m1 \"|${SELF}$\" |cut -f1 -d'|'`" #example: snes or atari2600 or pce
#now we need to make it upper case
export SYSTEM="${SYSTEM^^}" # ... note "${SYSTEM,,}" would force lower case
export ROMFILE='' # the file to load up on program start
export ROMICON='cartridge_pce' # the icon file in /usr/share/pixmaps/ to use for this system

# set command line options
while [ $# != 0 ]; do
   I=1
   while [ $I -le `echo $# | wc -c` ]; do
      case $1 in
         -rom) [ -f "$2" ] && ROMFILE="$2" || ROMFILE='' ;;
         -fgui) FULLGUI="true";;
         -f|--fullscreen) FSGUI="-f "; FULLSCREENGUI="--class=jwm-maximized"; DECORATED="decorated=\"false\"";;
         -v|--version)echo "pasnes $VERSION"; exit;;
         -h|--help)
echo 'Usage: papce [OPTION]

Options
  -romfile	    Load up the given rom on program startup (give full path)
  -f    Start the rom loader GUI in fullscreen
  -h    Show this help message'; exit;;
         #if the given option is a file, assign to $ROMFILE, we will autoload it
         *) [ -f "$1" ] && ROMFILE="$1";;
      esac
      shift
      I=$[$I+1]
   done
done

#check if config exists
#	pce --fullscreen --overlay 1 --window-size 1/2/3/4 --aspect-ratio 1 --eagle 0 --scanline 1 --stereo 1 --cd-emulation=0/1 --cd-device=/dev/sr0 --netplay 192.168.0.6 "path/to/rom"
if [ ! -f $CONFIG ]; then #no config - set default values
	mkdir -p $WORKDIR 2> /dev/null
	DIR="$HOME" #default browser dir
	FULL=1
	OVERLAY=0
	WINDOW=2
	ASPECT=1
	EAGLE=0
	SCANLINE=0
	STEREO=0
	CDEMUL=0
	DEV=/dev/cdrom
	TAGS=""
else
	. $CONFIG #read config file
fi

#get settings from main rom loader settings file, for theme settings and other stuff
export RCFILE=$HOME/.paloader/paloader.cfg
if [ -f "$RCFILE" ];then
	 . "$RCFILE"
fi

#####     F U N C T I O N S     ######

set -a #export all functions

# get rom loader functions
. /usr/local/rom-loader/func/func_get_resolution 			#get screen res
. /usr/local/rom-loader/func/func_set_theme					# adjust font sizes based on screen res
. /usr/local/rom-loader/func/func_sanitise_romname		# clean up rom names to be searchable
. /usr/local/rom-loader/func/func_build_chooser_list 		# needs SYSTEM and EXT_LIST set & exported near top of this file
. /usr/local/rom-loader/func/func_browser_go_to_dir		# file browsing
. /usr/local/rom-loader/func/func_browser_change_dir	# file browsing
. /usr/local/rom-loader/func/func_set_custom_config	# get the custom cfg for the current rom
. /usr/local/rom-loader/func/func_popup							# popup dialog when user lodas up a rom
. /usr/local/rom-loader/func/func_file_check 					# set boxart ($IMG_FILE), desc file,
. /usr/local/rom-loader/func/func_set_gui_height			# fill screen height
. /usr/local/rom-loader/func/func_kill_rejoystick				# a nicer way to end joypad navigation control
#for bottom panel
. /usr/local/rom-loader/func/func_get_rom_descr 			# needs $CHOOSER, sets $desc_file
. /usr/local/rom-loader/func/func_set_rom_descr 			# needs $DIR$CHOOSER and $desc_file
. /usr/local/rom-loader/func/func_edit_rom_details 		#needs $romname
. /usr/local/rom-loader/func/func_get_rom_boxart 		#needs $romname, sets $IMG_FILE
. /usr/local/rom-loader/func/func_set_rom_boxart 		#needs $IMG_FILE

write_config () {
	#write all variable values to config file
	echo '#papce config file' > $CONFIG
	echo DIR="\"$DIR\""	 >> $CONFIG
	echo FULL=$FULL >> $CONFIG
	echo OVERLAY=$OVERLAY >> $CONFIG
	echo WINDOW=$WINDOW >> $CONFIG
	echo ASPECT=$APSECT >> $CONFIG
	echo EAGLE=$EAGLE >> $CONFIG
	echo SCANLINE=$SCANLINE >> $CONFIG
	echo STEREO=$STEREO >> $CONFIG
	echo CDEMUL=$CDEMUL >> $CONFIG
	echo DEV="/dev/cdrom" >> $CONFIG
	echo TAGS="\"$TAGS\"" >> $CONFIG

	# here, we do 2 things: we get the custom config for any backends NOT being used, 
	# starting with first in list, goind down (see backend menus in Settings page), 
	# if a cfg for a non-enabled backend exists, that backend is used to auto load the rom with those custom settings
	# if no custom configs exist for non used backends, get the custom config for the currently enabled backend
	# we do this so users can set custom settings AND emulators for each ROM..
	set_custom_config
	
}

execute (){
	export GTK2_RC_FILES="$HOME/.gtkrc-2.0"	#reset gtk-theme
	write_config #keep settings for next startup

	# set the options for the final command
	if [ "$FULL" = true ];then
		C="--fullscreen=1"
	else
		C="--fullscreen=0"
	fi

	if [ "$OVERLAY" = true ];then
		C="$C --overlay=1"
	else
		C="$C --overlay=0"
	fi

	# set window size
	[ "$FULL" != true ] && C="$C --window-size=$WINDOW"

#	if [ "$WINDOW" = "4" ];then
#		C="$C --window-size=4"
#	elif [ "$WINDOW" = "3" ];then
#		C="$C --window-size=3"
#	elif [ "$WINDOW" = "2" ];then
#		C="$C --window-size=2"
#	else
#		C="$C --window-size=1"
#	fi

	if [ "$ASPECT" = true ];then
		C="$C --aspect-ratio=1"
	else
		C="$C --aspect-ratio=0"
	fi

	if [ "$EAGLE" = true ];then
		C="$C --eagle=1"
	else
		C="$C --eagle=0"
	fi

	if [ "$SCANLINE" = true ];then
		C="$C --scanline=1"
	else
		C="$C --scanline=0"
	fi

	if [ "$STEREO" = true ];then
		C="$C --stereo=1"
	else
		C="$C --stereo=0"
	fi

	# set emulation level
	C="$C --cd-emulation=$CDEMUL"

#	if [ "$CDEMUL" = true ];then
#		C="$C --cd-emulation=0"
#	else
#		C="$C --cd-emulation=1"
#	fi

	if [ "$DEV" = "/dev/cdrom" ];then
		C="$C --cd-device=/dev/cdrom"
	else
		C="$C --de-device=$DEV"
	fi

	# enable joypad rom browsing
	rejoystick1cc --load --profile hugo &>/dev/null
	rejoystick2cc --load --profile hugo &>/dev/null
	unclutter -idle 1 -jitter 6 -reset -root &

	# THE ACTUAL, FINAL COMMAND
	mkdir -p /tmp/paloader
	echo "hugo $C $TAGS \"$DIR$CHOOSER\""  > /tmp/paloader/${SELF}_cmd
	. /tmp/paloader/${SELF}_cmd &> /tmp/paloader/${SELF}_cmd_output

	# enable joypad rom browsing
	rejoystick1cc --load --profile romloader &>/dev/null
	rejoystick2cc --load --profile romloader &>/dev/null
	killall -9 unclutter &>/dev/null

}

#####     P R O G R A M     ######

#define default directory in browser
echo "$DIR" > $WORKDIR/dir
ls -1p --group-directories-first "$DIR" > $WORKDIR/ls
browser_go_to_dir

#set default text in info-field
echo 'Select a valid ROM in the browser and execute' > $WORKDIR/info
# set the default puppy arcade box art
rm /root/.paloader/tmp/boxart.jpg &>/dev/null
ln -s /usr/share/paloader/romlists/boxart/default.jpg /root/.paloader/tmp/boxart.jpg

# set the height to full height of screen if run with -if/--fullscreen
set_gui_height

#define a unique gtk-theme. This can be built really fancy. See /usr/share/themes/DeepThought/gtk-2.0/gtkrc.
#Pmusic and Pburn uses this tecnique
cat "/root/.paloader/themes/${PCE_THEME:-$MAIN_THEME}" > /tmp/gtkrc

#get the screen res .. this will also set TITLESIZE and SUBTITELSIZE, 
# which are font sizes we update on the fly in theme files
get_resolution 
#now we update the font sizes based on current resolution
# set_theme will replace the font sizes in /tmp/gtkrc and then set the theme
set_theme

# auto run the given rom ($ROMFILE)
if [ -f "$ROMFILE" ];then #if rom was given
	# set the required vars to locate the rom
	export DIR="`dirname \"$ROMFILE\"`/"
	export CHOOSER="`basename \"$ROMFILE\"`"
	# load up the rom
	execute
	kill_rejoystick
	exit
fi

# get all arrays for combobox items
. /usr/local/rom-loader/combobox_arrays/`basename $0`

# create the file browsing gui stuff ... do it here cos gui_height and so has to be set first...
. /usr/local/rom-loader/func/func_build_chooser_gui
# usage:  build_chooser_gui $boxart_width $boxart_height
build_chooser_gui 280 200

# check for BIOS
if [ ! -e "/usr/lib/games/pce/CD-ROM System V3.01.pce" ];then
	. /usr/local/rom-loader/func/func_get_bios
	get_bios_pce
fi

#build gui
S='
<window title="Puppy Arcade - PCE loader (Hugo)" icon-name="gtk-execute" '$DECORATED' width-request="'$SCREEN_WIDTH'" height-request="'$SCREEN_HEIGHT'">
 <vbox>
  <notebook labels="ROMs|Settings|Help">


## E X E C U T E

 '$CHOOSER_GUI'

## S E T T I N G S

<vbox>
	<frame>

	<notebook labels="Graphics|Sound|Other">
		<frame>
			<hbox>
				<checkbox>
				<label>Fullscreen</label>
				<variable>FULL</variable>
				<default>"'$FULL'"</default>
				</checkbox>
				<checkbox>
				<label>Overlay</label>
				<variable>OVERLAY</variable>
				<default>"'$OVERLAY'"</default>
				</checkbox>
				<checkbox>
				<label>Original Aspect Ratio</label>
				<variable>ASPECT</variable>
				<default>"'$ASPECT'"</default>
				</checkbox>
			</hbox>
			<hbox>
				<checkbox>
				<label>Eagle Filtering</label>
				<variable>EAGLE</variable>
				<default>"'$EAGLE'"</default>
				</checkbox>
				<checkbox>
				<label>Scanlines</label>
				<variable>SCANLINES</variable>
				<default>"'$SCANLINES'"</default>
				</checkbox>
			</hbox>
			<hbox>
				<text><label>Window Size:</label></text>
				<combobox width-request="100" tooltip-text="Choose the scale and size of the window, if not using fullscreen">
					<variable>WINDOW</variable>
						'$WINDOW_ITEMS'
				</combobox>
			</hbox>

		</frame>
		<frame>

			<hbox>
			<checkbox>
				<label>Enable Stereo        </label>
				<variable>STEREO</variable>
				<default>"'$STEREO'"</default>
			</checkbox>
			</hbox>

		</frame>
		<frame>

			<hbox>
				<text><label>CD Device:</label></text>
				<combobox tooltip-text="Choose your default CD device. If you are not sure, leave it.">
					<variable>DEV</variable>
						'$DEV_ITEMS'
				</combobox>
			</hbox>
			<hbox>
				<text><label>CD Emulation Level:</label></text>
				<combobox tooltip-text="Choose the emulation level. If not using a CD, you can leave this as 0">
					<variable>CDEMUL</variable>
						'$CDEMUL_ITEMS'
				</combobox>
			</hbox>
			<hbox>
				<text><label>"Custom options"</label></text>
				<entry editable="true" left_margin="10">
				<variable>TAGS</variable>
				<default>"'$TAGS'"</default>
				</entry>
			</hbox>

		</frame>
	</notebook>
		
	</frame>
</vbox>

## H E L P
  <vbox>
	<edit can-focus="no" editable="false" indent="15">
		<variable>EDITOR</variable>
		<width>350</width><height>150</height>
		<default>"Hugo Controls:
	
ESC         		Exit
------------------------------------
In-game controls:

Player 1

W,S,A,D		up, down, left, right
v			Button I
b			Button II
R Shift		Select key
Enter		Start key

f			Toggle Autofire I
g			Toggle autofire II

------------------------------------------------
Player 2

Cursor keys	up, down, left, right
Numpad 1	Button I
Numpad 2	Button II
Numpad *	Select key
Numpad -	Start key

Numpad 4	Toggle Autofire I
Numpad 5	Toggle autofire II


Hugo Emulator controls:

F1			Search
F2			Set a value in RAM
F3			Freeze a value in RAM
F4			Test purpose key
F9			Toggle full screen mode

"</default>
	</edit>		
  </vbox>

 </notebook>


## B U T T O N S

	<hbox>
		<button use-stock="true" label="gtk-save" tootlip-text="Save your emulator settings">
			<variable>SAVE_SETTINGS</variable>
			<action>write_config; Xdialog --title "Settings Saved" --msgbox "Settings saved to $CONFIG" 0 0</action>
		</button>
		<button use-stock="true" label="gtk-help" tooltip-text="View all usage options for this emulator">
		    <action>defaulttexteditor /usr/share/doc/snes/readme.txt &</action>	
		</button>
		<button use-stock="true" label="gtk-quit" tooltip-text="Exit this frontend">
			<action>if [ "$FULLGUI" != "" ];then exec paloader -sk '$FSGUI' & sleep 0.6; fi</action>
			<action type="exit">EXIT_NOW</action>
		</button>
	</hbox>
 </vbox>
</window>'

export papce="`echo "$S" | sed -e 's/##.*//'`"  #I use double hash (##) for comments. Colors are defined as #FF0000
gtkdialog3 -p papce $FULLSCREENGUI # $FULLSCREENGUI contains (or not) --class=jwm-maximized and must be defined in jwm configuration to get window maximized
unset papce

# if NOT returning to the main menu ($FULLGUI=""), remove the rejoystick profile.. kill it to be safe... 
# and then we must use xdotool to quit the output of the joypad when rejoystick exits.. 
# if we dont do this, rejoystick/the joypad floods the next process/app/etc with a load of keypresses
if [ "$FULLGUI" = "" ];then
	kill_rejoystick
fi

exit 0
