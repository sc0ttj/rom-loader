#!/bin/sh

#enalbe joypad rom browsing
rejoystick1cc --load --profile romloader &>/dev/null
rejoystick2cc --load --profile romloader &>/dev/null

#make some shortcuts. Most for easy typing, but also for flexibility
export WORKDIR=$HOME/.paloader/tmp
export CONFIG=$HOME/.paloader/papsxrc
# set some vars as defaults
export FULLGUI=''
export FSGUI=''
export FULLSCREENGUI='';
export DECORATED='decorated="true"'

##
# for the build_chooser function, used by this script to browse files and dirs
export EXT_LIST="\.cdz$|\.iso$|\.bin$|\.mds$|\.img$"  # goes in a `grep -iE "$EXT_LIST"` command to filter out unwanted filetypes in build_chooser_list, keep only those listed
# get the guiname .. can use it to create game specific configs for each backend
export SELF="`basename "$0"`"
# $SYSTEM is used by func_build_chooser_list to choose the correct pupromdb file and descr dir
SYSTEM="`cat /root/.paloader/rclist.txt |grep -m1 \"|${SELF}$\" |cut -f1 -d'|'`" #example: snes or atari2600 or pce
#now we need to make it upper case
export SYSTEM="${SYSTEM^^}" # ... note "${SYSTEM,,}" would force lower case
export ROMFILE='' # the file to load up on program start
export ROMICON='cartridge_psx' # the icon file in /usr/share/pixmaps/ to use for this system

# set command line options
while [ $# != 0 ]; do
   I=1
   while [ $I -le `echo $# | wc -c` ]; do
      case $1 in
         -rom) [ -f "$2" ] && ROMFILE="$2" || ROMFILE='' ;;
         -fgui) FULLGUI="true";;
         -f|--fullscreen) FSGUI="-f "; FULLSCREENGUI="--class=jwm-maximized"; DECORATED="decorated=\"false\"";;
         -v|--version)echo "pasnes $VERSION"; exit;;
         -h|--help)
echo 'Usage: pasnes [OPTION]

Options
  -romfile	    Load up the given rom on program startup (give full path)
  -f    Start the rom loader GUI in fullscreen
  -h    Show this help message'; exit;;
         #if the given option is a file, assign to $ROMFILE, we will autoload it
         *) [ -f "$1" ] && ROMFILE="$1";;
      esac
      shift
      I=$[$I+1]
   done
done


#check if config exists
if [ ! -f $CONFIG ]; then #no config - set default values
	mkdir -p $WORKDIR 2> /dev/null
	DIR=$HOME #default browser dir
	RUNCD="false"
	RUNISO="true"
	FULL=Default
	VIDEO=Default
	SOUND=Default
	INPUT1=Default
	INPUT2=Default
	PSXTYPE=Default
	CDAUDIO=Default
	PSXOUT=Default
else
	. $CONFIG #read config file
fi

#get settings from main rom loader settings file, for theme settings and other stuff
export RCFILE=$HOME/.paloader/paloader.cfg
if [ -f "$RCFILE" ];then
	 . "$RCFILE"
fi

#####     F U N C T I O N S     ######

set -a #export all functions

# get rom loader functions
. /usr/local/rom-loader/func/func_get_resolution 			#get screen res
. /usr/local/rom-loader/func/func_set_theme					# adjust font sizes based on screen res
. /usr/local/rom-loader/func/func_sanitise_romname		# clean up rom names to be searchable
. /usr/local/rom-loader/func/func_build_chooser_list 		# needs SYSTEM and EXT_LIST set & exported near top of this file
. /usr/local/rom-loader/func/func_browser_go_to_dir		# file browsing
. /usr/local/rom-loader/func/func_browser_change_dir	# file browsing
. /usr/local/rom-loader/func/func_set_custom_config	# get the custom cfg for the current rom
. /usr/local/rom-loader/func/func_popup							# popup dialog when user lodas up a rom
. /usr/local/rom-loader/func/func_file_check 					# set boxart ($IMG_FILE), desc file,
. /usr/local/rom-loader/func/func_set_gui_height			# fill screen height
. /usr/local/rom-loader/func/func_kill_rejoystick				# a nicer way to end joypad navigation control
#for bottom panel
. /usr/local/rom-loader/func/func_get_rom_descr 			# needs $CHOOSER, sets $desc_file
. /usr/local/rom-loader/func/func_set_rom_descr 			# needs $DIR$CHOOSER and $desc_file
. /usr/local/rom-loader/func/func_edit_rom_details 		#needs $romname
. /usr/local/rom-loader/func/func_get_rom_boxart 		#needs $romname, sets $IMG_FILE
. /usr/local/rom-loader/func/func_set_rom_boxart 		#needs $IMG_FILE

write_config () {
	#write all variable values to config file
	echo '#PApsx config file' > $CONFIG
	echo DIR="\"$DIR\""	 >> $CONFIG
	echo RUNCD=$RUNCD >> $CONFIG
	echo RUNISO=$RUNISO >> $CONFIG
	echo FULL=$FULL >> $CONFIG
	echo VIDEO=$VIDEO >> $CONFIG
	echo SOUND=$SOUND >> $CONFIG
	echo INPUT1=$INPUT1 >> $CONFIG
	echo INPUT2=$INPUT2 >> $CONFIG
	echo PSXTYPE=$PSXTYPE >> $CONFIG
	echo CDAUDIO=$CDAUDIO >> $CONFIG
	echo PSXOUT=$PSXOUT >> $CONFIG

	# here, we do 2 things: we get the custom config for any backends NOT being used, 
	# starting with first in list, goind down (see backend menus in Settings page), 
	# if a cfg for a non-enabled backend exists, that backend is used to auto load the rom with those custom settings
	# if no custom configs exist for non used backends, get the custom config for the currently enabled backend
	# we do this so users can set custom settings AND emulators for each ROM..
	set_custom_config
	
	case $VIDEO in
	Default) echo '' ;;
	*) OLDVIDEO="`cat /root/.pcsx/pcsx.cfg | grep -m1 \"^Gpu = \" | cut -f3 -d' '`"
		sed -i "s|Gpu = $OLDVIDEO|Gpu = $VIDEO|" /root/.pcsx/pcsx.cfg
		;;
	esac
	
	case $SOUND in
	Default) echo '' ;;
	*) OLDSOUND="`cat /root/.pcsx/pcsx.cfg | grep -m1 \"^Spu = \" | cut -f3 -d' '`"
		sed -i "s|Spu = $OLDSOUND|Spu = $SOUND|" /root/.pcsx/pcsx.cfg
	;;
	esac
	
	case $INPUT1 in
	Default) echo '' ;;
	*) OLDINPUT1="`cat /root/.pcsx/pcsx.cfg | grep -m1 \"^Pad1 = \" | cut -f3 -d' '`"
		sed -i "s|Pad1 = $OLDINPUT1|Pad1 = $INPUT1|" /root/.pcsx/pcsx.cfg
		;;
	esac
	
	case $INPUT2 in
	Default) echo '' ;;
	*) OLDINPUT2="`cat /root/.pcsx/pcsx.cfg | grep -m1 \"^Pad2 = \" | cut -f3 -d' '`"
		sed -i "s|Pad2 = $OLDINPUT2|Pad2 = $INPUT2|" /root/.pcsx/pcsx.cfg
		;;
	esac
	
	case $PSXTYPE in
	Default) echo '' ;;
	*) OLDPSXTYPE="`cat /root/.pcsx/pcsx.cfg | grep -m1 \"^PsxType = \" | cut -f3 -d' '`"
		sed -i "s|PsxType = $OLDPSXTYPE|PsxType = $PSXTYPE|" /root/.pcsx/pcsx.cfg
		;;
	esac
	
	case $CDAUDIO in
	Default) echo '' ;;
	*) OLDCDAUDIO="`cat /root/.pcsx/pcsx.cfg | grep -m1 \"^Cdda = \" | cut -f3 -d' '`"
		sed -i "s|Cdda = $OLDCDAUDIO|Cdda = $CDAUDIO|" /root/.pcsx/pcsx.cfg
		;;
	esac
	
	case $PSXOUT in
	Default) echo '' ;;
	*) OLDPSXOUT="`cat /root/.pcsx/pcsx.cfg | grep -m1 \"^PsxOut = \" | cut -f3 -d' '`"
		sed -i "s|PsxOut = $OLDPSXOUT|PsxOut = $PSXOUT|" /root/.pcsx/pcsx.cfg
		;;
	esac
	
}

execute (){
	export GTK2_RC_FILES="$HOME/.gtkrc-2.0"	#reset gtk-theme

	#we might be receiving a file from another backend
	#madnafen (maybe others?) use .cue files only .. and pcsx doesnt work with .cue files.. ugh..
	#so lets *make sure* we are using the bin or iso or whatever, not the cue file	
	CHOOSER="${CHOOSER//.cue/.bin}"
	[ ! -f "$DIR$CHOOSER" ] && CHOOSER="`find \"$DIR\" -iname \"${CHOOSER%.*}.*\"`"

	write_config #keep settings for next startup

	if [ "$RUNCD" = true ];then
		C="-runcd"
	fi
	
	if [ "$RUNISO" = true ];then
		C="-nogui -cdfile '${DIR}${CHOOSER}'"
	fi

	# enable joypad rom browsing
	rejoystick1cc --load --profile pcsx &>/dev/null
	rejoystick2cc --load --profile pcsx &>/dev/null
	unclutter -idle 1 -jitter 6 -reset -root &

	# THE ACTUAL, FINAL COMMAND
	mkdir -p /tmp/paloader
	echo "pcsx $C"  > /tmp/paloader/${SELF}_cmd
	. /tmp/paloader/${SELF}_cmd &> /tmp/paloader/${SELF}_cmd_output

	# enable joypad rom browsing
	rejoystick1cc --load --profile romloader &>/dev/null
	rejoystick2cc --load --profile romloader &>/dev/null
	killall -9 unclutter &>/dev/null

}

#####     P R O G R A M     ######

#define default directory in browser
echo "$DIR" > $WORKDIR/dir
ls -1p --group-directories-first "$DIR" > $WORKDIR/ls
browser_go_to_dir

#set default text in info-field
echo 'Select a valid ROM in the browser and execute' > $WORKDIR/info
# set the default puppy arcade box art
rm /root/.paloader/tmp/boxart.jpg &>/dev/null
ln -s /usr/share/paloader/romlists/boxart/default.jpg /root/.paloader/tmp/boxart.jpg

# set the height to full height of screen if run with -if/--fullscreen
set_gui_height

#define a unique gtk-theme. This can be built really fancy. See /usr/share/themes/DeepThought/gtk-2.0/gtkrc.
#Pmusic and Pburn uses this tecnique
cat "/root/.paloader/themes/${PSX_THEME:-$MAIN_THEME}" > /tmp/gtkrc

#get the screen res .. this will also set TITLESIZE and SUBTITELSIZE, 
# which are font sizes we update on the fly in theme files
get_resolution 
#now we update the font sizes based on current resolution
# set_theme will replace the font sizes in /tmp/gtkrc and then set the theme
set_theme

# auto run the given rom ($ROMFILE)
if [ -f "$ROMFILE" ];then #if rom was given
	# set the required vars to locate the rom
	export DIR="`dirname \"$ROMFILE\"`/"
	export CHOOSER="`basename \"$ROMFILE\"`"
	# load up the rom
	execute
	kill_rejoystick
	exit
fi

# get all arrays for combobox items
. /usr/local/rom-loader/combobox_arrays/`basename $0`

# create the file browsing gui stuff ... do it here cos gui_height and so has to be set first...
. /usr/local/rom-loader/func/func_build_chooser_gui
# usage:  build_chooser_gui $boxart_width $boxart_height
build_chooser_gui 280 200

# check for BIOS
if [ ! -e "/usr/lib/games/psx/scph5501.bin" ];then
	. /usr/local/rom-loader/func/func_get_bios
	get_bios_psx
fi

#build gui
S='
<window title="Puppy Arcade - PlayStation loader (PCSX)" icon-name="gtk-execute" '$DECORATED' width-request="'$SCREEN_WIDTH'" height-request="'$SCREEN_HEIGHT'">
 <vbox>
  <notebook labels="ROMs|Settings|Help">


## E X E C U T E

 '$CHOOSER_GUI'

## S E T T I N G S

		<vbox>

			<text><label>""</label></text>
			<hbox>
				<radiobutton>
					<variable>RUNCD</variable>
					<label>Run PSX CD</label>
					<default>"'$RUNCD'"</default>
				</radiobutton>
				<text width-request="5"><label>""</label></text>
				<radiobutton>
					<variable>RUNISO</variable>
					<label>Run ISO File</label>
					<default>"'$RUNISO'"</default>
				</radiobutton>
				<text width-request="5"><label>""</label></text>
			</hbox>

			<frame>

				<hbox>
					<text><label>Video Plugin:</label></text>
					<combobox tooltip-text="Choose a video plugin" width-request="160">
					<variable>VIDEO</variable>
						'$VIDEO_ITEMS'
					</combobox>
					<text width-request="5"><label>""</label></text>
				</hbox>

				<hbox>
					<text><label>Sound Plugin:</label></text>
					<combobox tooltip-text="Choose a sound plugin" width-request="160">
					<variable>SOUND</variable>
						'$SOUND_ITEMS'
					</combobox>
					<text width-request="5"><label>""</label></text>

					<text><label>Enable CD Audio:</label></text>
					<combobox tooltip-text="Choose a plugin for player 2 input device" width-request="160">
					<variable>CDAUDIO</variable>
						'$CDAUDIO_ITEMS'
					</combobox>
					<text width-request="5"><label>""</label></text>
				</hbox>

				<hbox>
					<text><label>Input 1 Plugin:</label></text>
					<combobox tooltip-text="Choose a plugin for player 1 input device" width-request="160">
					<variable>INPUT1</variable>
						'$INPUT1_ITEMS'
					</combobox>
					<text width-request="25"><label>""</label></text>

					<text><label>Input 2 Plugin:</label></text>
					<combobox tooltip-text="Choose a plugin for player 2 input device" width-request="160">
					<variable>INPUT2</variable>
						'$INPUT2_ITEMS'
					</combobox>
					<text width-request="5"><label>""</label></text>
				</hbox>

				<hbox>
					<text><label>PSX Type:</label></text>
					<combobox tooltip-text="Choose PAL (europe) or NTSC" width-request="160">
					<variable>PSXTYPE</variable>
						'$PSXTYPE_ITEMS'
					</combobox>
					<text width-request="15"><label>""</label></text>

					<text><label>Console output:</label></text>
					<combobox tooltip-text="Output emulation data to a console" width-request="160">
					<variable>PSXOUT</variable>
						'$PSXOUT_ITEMS'
					</combobox>
					<text width-request="5"><label>""</label></text>
				
				</hbox>

			</frame>

		</vbox>
		
##  H E L P
		
		<vbox>

			<edit can-focus="no" editable="false" indent="15">
				<variable>EDITOR</variable>
				<width>350</width><height>150</height>
				<default>"PCSX Help:

Run the PCSX emulator (Menu->Fun->PCSX) 
and use the menus provided to setup joypads..
----------------------------------
Emulator controls:
			
ESC			Quit
-----------------------------------

In-game keyboard Controls:

Player 1:

	w,s,a,d			up, down, left, right
	b				X
	n				Circle
	v				Square
	g				Triangle
	c				L1
	f				L2
	m				R1
	h				R2
	Enter			Start
	R_Shift			Select

Player 2:

	cursor keys		up, down, left, right
	(all keys below on numpad)
	2				X
	3				Circle
	1				Square
	5				Triangle
	4				L1
	7				L2
	6				R1
	9				R2
	Enter			Start
	+				Select

"</default>
			</edit>

		</vbox>

	</notebook>


## B U T T O N S

	<hbox>
		<button use-stock="true" label="gtk-save" tootlip-text="Save your emulator settings">
			<variable>SAVE_SETTINGS</variable>
			<action>write_config; Xdialog --title "Settings Saved" --msgbox "Settings saved to $CONFIG" 0 0</action>
		</button>
		<button use-stock="true" label="gtk-help" tooltip-text="View all usage options for this emulator">
		    <action>defaulttexteditor /usr/share/doc/psx/readme.txt &</action>	
		</button>
		<button use-stock="true" label="gtk-quit" tooltip-text="Exit this frontend">
			<action>if [ "$FULLGUI" != "" ];then paloader -sk '$FSGUI' & sleep 0.6; fi</action>
			<action type="exit">EXIT_NOW</action>
		</button>
	</hbox>
 </vbox>
</window>'

export papsx="`echo "$S" | sed -e 's/##.*//'`"  #I use double hash (##) for comments. Colors are defined as #FF0000
gtkdialog3 -p papsx $FULLSCREENGUI # $FULLSCREENGUI contains (or not) --class=jwm-maximized and must be defined in jwm configuration to get window maximized
unset papsx

# if NOT returning to the main menu ($FULLGUI=""), remove the rejoystick profile.. kill it to be safe... 
# and then we must use xdotool to quit the output of the joypad when rejoystick exits.. 
# if we dont do this, rejoystick/the joypad floods the next process/app/etc with a load of keypresses
if [ "$FULLGUI" = "" ];then
	kill_rejoystick
fi

exit 0
