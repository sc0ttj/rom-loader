#!/bin/sh

# enable joypad support
rejoystick1cc --load --profile romloader &>/dev/null
rejoystick2cc --load --profile romloader &>/dev/null

#make some shortcuts. Most for easy typing, but also for flexibility
export WORKDIR=$HOME/.paloader/tmp
export CONFIG=$HOME/.paloader/pahatarirc
# set some vars as defaults
export FULLSCREENGUI='';
export FULLGUI=''
export FSGUI=''
export DECORATED='decorated="true"'

##
# for the build_chooser function, used by this script to browse files and dirs
export EXT_LIST="\.st$|\.stx$|\.zip$"  # goes in a `grep -iE "$EXT_LIST"` command to filter out unwanted filetypes in build_chooser_list, keep only those listed
# get the guiname .. can use it to create game specific configs for each backend
export SELF="`basename "$0"`"
# $SYSTEM is used by func_build_chooser_list to choose the correct pupromdb file and descr dir
SYSTEM="`cat /root/.paloader/rclist.txt |grep -m1 \"|${SELF}$\" |cut -f1 -d'|'`" #example: snes or atari2600 or pce
#now we need to make it upper case
export SYSTEM="${SYSTEM^^}" # ... note "${SYSTEM,,}" would force lower case
export ROMFILE='' # the file to load up on program start
export ROMICON='cartridge_atari' # the icon file in /usr/share/pixmaps/ to use for this system

# set command line options
while [ $# != 0 ]; do
   I=1
   while [ $I -le `echo $# | wc -c` ]; do
      case $1 in
         -rom) [ -f "$2" ] && ROMFILE="$2" || ROMFILE='' ;;
         -fgui) FULLGUI="true";;
         -f|--fullscreen) FSGUI="-f "; FULLSCREENGUI="--class=jwm-maximized"; DECORATED="decorated=\"false\"";;
         -v|--version)echo "PAhatari $VERSION"; exit;;
         -h|--help)
echo 'Usage: pahatari [OPTION]

Options
  -romfile	    Load up the given rom on program startup (give full path)
  -f    Start the rom loader GUI in fullscreen
  -h    Show this help message'; exit;;
         #if the given option is a file, assign to $ROMFILE, we will autoload it
         *) [ -f "$1" ] && ROMFILE="$1";;
      esac
      shift
      I=$[$I+1]
   done
done

#check if config exists
if [ ! -f $CONFIG ]; then #no config - set default values
	mkdir -p $WORKDIR 2> /dev/null
	DIR="$HOME" #default browser dir
	# gfx options
	FULL=true
	ZOOM=true
	BPP="Default"
	# sys options
	MACHINE="Default"
	CPU="Default"
	CLOCK="Default"
	RAM_SIZE="Default"
	SAFECPU=false
	# file
	TOS="/usr/share/hatari/tos.img"
	HDD="[Choose directory]"
	ACSI="[Choose directory]"
	CARTRIDGE="[Choose cartridge file]"
	KEYMAP="[Choose keymap file]"
	# sound options
	SOUND="Default"
	# other
	WORD1=""
else
	. $CONFIG #read config file
fi

#get settings from main rom loader settings file, for theme settings and other stuff
export RCFILE=$HOME/.paloader/paloader.cfg
if [ -f "$RCFILE" ];then
	 . "$RCFILE"
fi

#####     F U N C T I O N S     ######

set -a #export all functions

# get rom loader functions
. /usr/local/rom-loader/func/func_get_resolution 			#get screen res
. /usr/local/rom-loader/func/func_set_theme					# adjust font sizes based on screen res
. /usr/local/rom-loader/func/func_sanitise_romname		# clean up rom names to be searchable
. /usr/local/rom-loader/func/func_build_chooser_list 		# needs SYSTEM and EXT_LIST set & exported near top of this file
. /usr/local/rom-loader/func/func_browser_go_to_dir		# file browsing
. /usr/local/rom-loader/func/func_browser_change_dir	# file browsing
. /usr/local/rom-loader/func/func_set_custom_config	# get the custom cfg for the current rom
. /usr/local/rom-loader/func/func_popup							# popup dialog when user lodas up a rom
. /usr/local/rom-loader/func/func_file_check 					# set boxart ($IMG_FILE), desc file,
. /usr/local/rom-loader/func/func_set_gui_height			# fill screen height
. /usr/local/rom-loader/func/func_kill_rejoystick				# a nicer way to end joypad navigation control
#for bottom panel
. /usr/local/rom-loader/func/func_get_rom_descr 			# needs $CHOOSER, sets $desc_file
. /usr/local/rom-loader/func/func_set_rom_descr 			# needs $DIR$CHOOSER and $desc_file
. /usr/local/rom-loader/func/func_edit_rom_details 		#needs $romname
. /usr/local/rom-loader/func/func_get_rom_boxart 		#needs $romname, sets $IMG_FILE
. /usr/local/rom-loader/func/func_set_rom_boxart 		#needs $IMG_FILE

write_config () {
	#write all variable values to config file
	echo '#PAhatari config file' > $CONFIG
	echo DIR="\"$DIR\""	 >> $CONFIG
	# DISPLAY OPTIONS
	echo FULL=$FULL >> $CONFIG
	echo ZOOM=$ZOOM >> $CONFIG
	echo BPP=$BPP >> $CONFIG
	#SYS OPTIONS
	echo MACHINE=$MACHINE>> $CONFIG
	echo CPU=$CPU>> $CONFIG
	echo CLOCK=$CLOCK >> $CONFIG
	echo RAM_SIZE=$RAM_SIZE >> $CONFIG
	echo SAFECPU=$SAFECPU>> $CONFIG
	# FILE OPTIONS
	echo TOS="\"$TOS\"" >> $CONFIG
	echo HDD="\"$HDD\"" >> $CONFIG
	echo ACSI="\"$ACSI\"" >> $CONFIG
	echo CARTRIDGE="\"$CARTRIDGE\"" >> $CONFIG
	echo KEYMAP="\"$KEYMAP\"" >> $CONFIG
	# MISC OPTIONS
	echo SOUND=$SOUND >> $CONFIG
	echo WORD1="\"$WORD1\"" >> $CONFIG

	# here, we do 2 things: we get the custom config for any backends NOT being used, 
	# starting with first in list, goind down (see backend menus in Settings page), 
	# if a cfg for a non-enabled backend exists, that backend is used to auto load the rom with those custom settings
	# if no custom configs exist for non used backends, get the custom config for the currently enabled backend
	# we do this so users can set custom settings AND emulators for each ROM..
	set_custom_config
	
}

execute (){
	export GTK2_RC_FILES="$HOME/.gtkrc-2.0"	#reset gtk-theme
	write_config #keep settings for next startup

	# set fullscreen
	if [ "$FULL" = true ];then
	  C="-f"
	else
	  C="-w"
	fi

	# set fullscreen
	if [ "$ZOOM" = true ];then
	  C="$C -z 2"
	else
	  C="$C -z 1"
	fi

	# set bits per pixel
	if [ "$BPP" = "32" ];then
	  C="$C --bpp 32"
	elif [ "$BPP" = "16" ];then
	  C="$C --bpp 16"
	elif [ "$BPP" = "15" ];then
	  C="$C --bpp 15"
	elif [ "$BPP" = "8" ];then
	  C="$C --bpp 8"
	elif [ "$BPP" = "Disabled" ];then
	  C="$C --bpp 0"
	else
	  C="$C"
	fi

	# set MACHINE
	if [ "$MACHINE" = "ST" ];then
	  C="$C --machine st"
	elif [ "$MACHINE" = "STE" ];then
	  C="$C --machine ste"
	elif [ "$MACHINE" = "TT" ];then
	  C="$C --machine tt"
	elif [ "$MACHINE" = "Falcon" ];then
	  C="$C --machine falcon"
	else
	  C="$C"
	fi

	# set CPU
	if [ "$CPU" = "Default" ];then
	  C="$C"
	else
	  C="$C --cpulevel "$CPU
	fi

	# set CLOCK
	if [ "$CLOCK" = "Default" ];then
	  C="$C"
	else
	  C="$C --cpuclock "$CLOCK
	fi

	# set RAM_SIZE size
	if [ "$RAM_SIZE" = "512k" ];then
	  C="$C --memsize 0"
	elif [ "$RAM_SIZE" = "1MB" ];then
	  C="$C --memsize 1"
	elif [ "$RAM_SIZE" = "2MB" ];then
	  C="$C --memsize 2"
	elif [ "$RAM_SIZE" = "4MB" ];then
	  C="$C --memsize 4"
	elif [ "$RAM_SIZE" = "8MB" ];then
	  C="$C --memsize 8"
	elif [ "$RAM_SIZE" = "12MB" ];then
	  C="$C --memsize 12"
	elif [ "$RAM_SIZE" = "14MB" ];then
	  C="$C --memsize 14"
	else
	  C="$C"
	fi

	# set compatible CPU
	if [ "$SAFECPU" = true ];then
	  C="$C --compatible 1"
	else
	  C="$C --compatible 0"
	fi

	# set the TOS image if specified, requires file (optional)
	if [ "$TOS" != "/usr/share/hatari/tos.img" ] && [ -e "$TOS" ] ;then
		C="$C --tos \"$TOS\""
	else
		C="$C"
	fi

	# set the hard drive if specified, required directory
	if [ -e "$HDD" ];then
		C="$C -d \"$HDD\""
	else
		C="$C"
	fi
	
	# set the ACSI hard drive if specified, requires file
	if [ -e "$ACSI" ];then
		C="$C --acsi \"$ACSI\""
	else
		C="$C"
	fi

	# set the cartridge if specified, requires file
	if [ -e "$CARTRIDGE" ];then
		C="$C --cartridge \"$CARTRIDGE\""
	else
		C="$C"
	fi

	# set sound quality
	if [ "$SOUND" = "Off" ];then
	  C="$C --sound off"
	elif [ "$SOUND" = "Low" ];then
	  C="$C --sound low"
	elif [ "$SOUND" = "Med" ];then
	  C="$C --sound med"
	elif [ "$SOUND" = "High" ];then
	  C="$C --sound hi"
	else
	  C="$C"
	fi

	# set the keymap if specified, required file
	if [ -e "$KEYMAP" ];then
		C="$C --keymap \"$KEYMAP\""
	else
		C="$C"
	fi
	
	# enable joypad support
	rejoystick1cc --load --profile atarist &>/dev/null
	rejoystick2cc --load --profile atarist &>/dev/null
	unclutter -idle 1 -jitter 6 -reset -root &

	# THE ACTUAL, FINAL COMMAND
	mkdir -p /tmp/paloader
	echo "hatari --configfile \"/root/.hatari/hatari.cfg\" $C $WORD1 \"$DIR$CHOOSER\""  > /tmp/paloader/${SELF}_cmd
	. /tmp/paloader/${SELF}_cmd &> /tmp/paloader/${SELF}_cmd_output

	# enable joypad support
	rejoystick1cc --load --profile romloader &>/dev/null
	rejoystick2cc --load --profile romloader &>/dev/null
	killall -9 unclutter &>/dev/null

}

#####     P R O G R A M     ######


#define default directory in browser
echo "$DIR" > $WORKDIR/dir
ls -1p --group-directories-first "$DIR" > $WORKDIR/ls
browser_go_to_dir

#set default text in info-field
echo 'Select a valid ROM in the browser and execute' > $WORKDIR/info
# set the default puppy arcade box art
rm /root/.paloader/tmp/boxart.jpg &>/dev/null
ln -s /usr/share/paloader/romlists/boxart/default.jpg /root/.paloader/tmp/boxart.jpg

# set the height to full height of screen if run with -if/--fullscreen
set_gui_height

#define a unique gtk-theme. This can be built really fancy. See /usr/share/themes/DeepThought/gtk-2.0/gtkrc.
#Pmusic and Pburn uses this tecnique
cat "/root/.paloader/themes/${ATARI_ST_THEME:-$MAIN_THEME}" > /tmp/gtkrc

#get the screen res .. this will also set TITLESIZE and SUBTITELSIZE, 
# which are font sizes we update on the fly in theme files
get_resolution 
#now we update the font sizes based on current resolution
# set_theme will replace the font sizes in /tmp/gtkrc and then set the theme
set_theme

# auto run the given rom ($ROMFILE)
if [ -f "$ROMFILE" ];then #if rom was given
	# set the required vars to locate the rom
	export DIR="`dirname \"$ROMFILE\"`/"
	export CHOOSER="`basename \"$ROMFILE\"`"
	# load up the rom
	execute
	kill_rejoystick
	exit
fi

# get all arrays for combobox items
. /usr/local/rom-loader/combobox_arrays/`basename $0`

# check for bios file
if [ ! -e "/usr/lib/games/atari/tos.img" ];then
	. /usr/local/rom-loader/func/func_get_bios
	get_bios_atari
fi

# create the file browsing gui stuff ... do it here cos gui_height and so has to be set first...
. /usr/local/rom-loader/func/func_build_chooser_gui
# usage:  build_chooser_gui $boxart_width $boxart_height
build_chooser_gui 280 200

#build gui
S='
<window title="Puppy Arcade - Atari ST loader" icon-name="gtk-execute" '$DECORATED' width-request="'$SCREEN_WIDTH'" height-request="'$SCREEN_HEIGHT'">
 <vbox>
  <notebook labels="ROMs|Settings|Help">

## E X E C U T E

 '$CHOOSER_GUI'


## S E T T I N G S

	<vbox>
		<notebook labels="General Settings|System Files and Drives">
			<vbox>
				<frame Display options>
					<hbox>
						<checkbox tooltip-text="Enable fullscreen display">
							<label>Fullscreen</label>
							<variable>FULL</variable>
							<default>"'$FULL'"</default>
						</checkbox>
					<text width-request="12"><label>""</label></text>
						<checkbox tooltip-text="Zoom display x2">
							<label>Zoom</label>
							<variable>ZOOM</variable>
							<default>"'$ZOOM'"</default>
						</checkbox>
					<text width-request="10"><label>""</label></text>
						<text><label>Bits per pixel:</label></text>
						<combobox tooltip-text="Higher values mean better image quality" width-request="110">
							<variable>BPP</variable>
							'$BPP_ITEMS'
						</combobox>
					</hbox>
					<text height-request="12"><label>""</label></text>
				</frame>

				<frame System Options>
					<hbox>
						<text><label>Machine:</label></text>
						<combobox tooltip-text="Choose which system you wich to emulate" width-request="155">
							<variable>MACHINE</variable>
							'$MACHINE_ITEMS'
						</combobox>
						<text width-request="40"><label>""</label></text>
						<text><label>CPU type:</label></text>
						<combobox tooltip-text="This ONLY works with EmuTOS or TOS 2.06. If in doubt, set to default!" width-request="150">
							<variable>CPU</variable>
							'$CPU_ITEMS'
						</combobox>
					</hbox>
					<hbox>
						<text><label>CPU clock:</label></text>
						<combobox tooltip-text="Choose the speed of the emulated CPU - higher is faster" width-request="155">
							<variable>CLOCK</variable>
							'$CLOCK_ITEMS'
						</combobox>
					<text width-request="70"><label>""</label></text>
						<text><label>RAM:</label></text>
						<combobox tooltip-text="The amount of RAM you want to give the emulated system" width-request="150">
							<variable>RAM_SIZE</variable>
							'$RAM_SIZE_ITEMS'
						</combobox>
					</hbox>
					<text height-request="5"><label>""</label></text>
					<hbox>
						<checkbox tooltip-text="Enable safe CPU for higher compatibility">
							<label>Enable high compatibility CPU</label>
							<default>"'$SAFECPU'"</default>
							<variable>SAFECPU</variable>
						</checkbox>
					</hbox>
						<text height-request="10"><label>""</label></text>
				</frame>

				<frame Other Options>
					<hbox>
						<text><label>Sound Quality:</label></text>
						<combobox>
							<variable>SOUND</variable>
							'$SOUND_ITEMS'
						</combobox>
					</hbox>
					<text height-request="20"><label>""</label></text>
					<hbox>
						<text><label>"Custom options (see Help)"</label></text>
						<entry editable="true" left_margin="10">
							<default>"'$WORD1'"</default>
							 <variable>WORD1</variable>
						</entry>
					</hbox>
				</frame>
			</vbox>
			<vbox>
				<frame File Options>
					<vbox>
						<text height-request="10"><label>""</label></text>
						<text><label>Atari system File:</label></text>
						<text height-request="5"><label>""</label></text>
					</vbox>
					<hbox>
						<text><label>TOS image:</label></text>
						<entry tooltip-text="This is the main Atari system file, and is ESSENTIAL!">
							<default>"'$TOS'"</default>
							<variable>TOS</variable>
						</entry>
						<button>
							<input file icon="gtk-open"></input>
							<action type="fileselect">HDD</action>
						</button>
					</hbox>
					<vbox>
						<text height-request="10"><label>""</label></text>
						<text><label>Optional File Settings:</label></text>
						<text height-request="5"><label>""</label></text>
					</vbox>
					<hbox>
						<text><label>Hard Drive:</label></text>
						<entry accept="directory" tooltip-text="Choose a directory to use as the atari hard drive">
							<default>"'$HDD'"</default>
							<variable>HDD</variable>
						</entry>
						<button>
							<input file icon="gtk-open"></input>
							<action type="fileselect">HDD</action>
						</button>
					</hbox>
					<hbox>
						<text><label>ACSI HDD:</label></text>
						<entry accept="directory" tooltip-text="Choose a directory to use as the atari ACSI hard drive">
							<default>"'$ACSI'"</default>
							<variable>ACSI</variable>
						</entry>
						<button>
							<input file icon="gtk-open"></input>
							<action type="fileselect">ACSI</action>
						</button>
					</hbox>
					<hbox>
						<text><label>Cartridge:</label></text>
						<entry tooltip-text="Choose a cartridge file to load">
							<default>"'$CARTRIDGE'"</default>
							<variable>CARTRIDGE</variable>
						</entry>
						<button>
							<input file icon="gtk-open"></input>
							<action type="fileselect">CARTRIDGE</action>
						</button>
					</hbox>
					<hbox>
						<text><label>Keymap:</label></text>
						<entry tooltip-text="Choose a kaymap file to change your keyboard layout">
							<default>"'$KEYMAP'"</default>
							<variable>KEYMAP</variable>
						</entry>
						<button>
							<input file icon="gtk-open"></input>
							<action type="fileselect">HDD</action>
						</button>
					</hbox>
				</frame>
			</vbox>
		</notebook>
	</vbox>

## H E L P

	<vbox>
	<edit can-focus="no" editable="false" indent="15">
		<variable>EDITOR</variable>
		<width>350</width><height>150</height>
		<default>"Hatari Help:
=======================
Press Ctrl+F12 to see the main menu

Controls (while emulation is running):

ALTGR+a 	record animation
ALTGR+g 	grabs a screenshot
ALTGR+i 	boss key: leave full screen mode and iconify window
ALTGR+j 	toggles joystick emulation via cursor keys
ALTGR+m 	(un-)locks the mouse into the window
ALTGR+r 	(warm) reset the ST
ALTGR+c 	coldreset the ST (same as the original power switch)
ALTGR+s 	enable/disable sound
ALTGR+q 	quit the emulator
ALTGR+x 	toggle normal/max speed
ALTGR+y 	enable/disable sound recording
ALTGR+k 	save memory snapshot
ALTGR+l 	load memory snapshot
F11 	toggles fullscreen and windowed mode
PAUSE 	will go to the debugger if, started with the -D option

Atari Emulated Keys

Alt 	will act as the STs ALTERNATE key
left CTRL 	will act as the STs CONTROL key
Print Screen 	will emulate the STs HELP key
Scroll Lock 	will emulate the STs UNDO key
Page Up 	will emulate the STs ( key in the keypad
Page Down 	will emulate the STs ) in the keypad"</default>
	</edit>		
	</vbox>
	</notebook>


## B U T T O N S

	<hbox>
		<button use-stock="true" label="gtk-save" tootlip-text="Save your emulator settings">
			<variable>SAVE_SETTINGS</variable>
			<action>write_config; Xdialog --title "Settings Saved" --msgbox "Settings saved to $CONFIG" 0 0</action>
		</button>
		<button use-stock="true" label="gtk-help" tooltip-text="View all usage options for this emulator">
		    <action>defaultbrowser /usr/share/doc/hatari/manual.html &</action>	
		</button>
		<button use-stock="true" label="gtk-quit" tooltip-text="Exit this frontend">
			<action>if [ "$FULLGUI" != "" ];then exec paloader -sk '$FSGUI' & fi</action>
			<action type="exit">EXIT_NOW</action>
		</button>
	</hbox>
 </vbox>
</window>'

export pahatari="`echo "$S" | sed -e 's/##.*//'`"  #I use double hash (##) for comments. Colors are defined as #FF0000
gtkdialog3 -p pahatari $FULLSCREENGUI # $FULLSCREENGUI contains (or not) --class=jwm-maximized and must be defined in jwm configuration to get window maximized
unset pahatari

# if NOT returning to the main menu ($FULLGUI=""), remove the rejoystick profile.. kill it to be safe... 
# and then we must use xdotool to quit the output of the joypad when rejoystick exits.. 
# if we dont do this, rejoystick/the joypad floods the next process/app/etc with a load of keypresses
if [ "$FULLGUI" = "" ];then
	kill_rejoystick
fi

exit 0
