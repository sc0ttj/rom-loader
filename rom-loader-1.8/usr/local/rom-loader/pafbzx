#!/bin/sh

###### initial setup vars and cli interface #####
{
# enable joypad rom browsing
rejoystick1cc --load --profile romloader &>/dev/null
rejoystick2cc --load --profile romloader &>/dev/null

#get settigns for this gui
export WORKDIR=$HOME/.paloader/tmp
export CONFIG=$HOME/.paloader/pafbzxrc
# set some vars as defaults for pafbzx command line interface
export FULLGUI=''
export FSGUI=''
export FULLSCREENGUI='';
export DECORATED='decorated="true"'

##
# for the build_chooser function, used by this script to browse files and dirs
export EXT_LIST="\.sna$|\.z80$|\.tap$|\.tzx$|\.fdi$|\.dsk$|\.trd$|\.scl$|\.scr$|\.pok$"  # goes in a `grep -iE "$EXT_LIST"` command to filter out unwanted filetypes in build_chooser_list, keep only those listed
# get the guiname .. can use it to create game specific configs for each backend
export SELF="`basename "$0"`"
# $SYSTEM is used by func_build_chooser_list to choose the correct pupromdb file and descr dir
SYSTEM="`cat /root/.paloader/rclist.txt |grep \"|${SELF}$\" |cut -f1 -d'|'`" #example: snes or atari2600 or pce
#now we need to make it upper case
export SYSTEM="${SYSTEM^^}" # ... note "${SYSTEM,,}" would force lower case
export ROMFILE='' # the file to load up on program start
export ROMICON='cartridge_zxspec' # the icon file in /usr/share/pixmaps/ to use for this system

# set command line options
while [ $# != 0 ]; do
   I=1
   while [ $I -le `echo $# | wc -c` ]; do
      case $1 in
         -rom) [ -f "$2" ] && ROMFILE="$2" || ROMFILE='' ;;
         -fgui) FULLGUI="true";;
         -f|--fullscreen) FSGUI="-f "; FULLSCREENGUI="--class=jwm-maximized"; DECORATED="decorated=\"false\"";;
         -v|--version)echo "pafbzx $VERSION"; exit;;
         -h|--help)
echo 'Usage: pafbzx [OPTION]

Options
  -romfile	    Load up the given rom on program startup (give full path)
  -f    		Start the rom loader GUI in fullscreen
  -h    		Show this help message'; exit;;
         #if the given option is a file, assign to $ROMFILE, we will autoload it
         *) [ -f "$1" ] && ROMFILE="$1";;
      esac
      shift
      I=$[$I+1]
   done
done

}

######  load config file or defaults #####
{
#check if config exists
if [ ! -f $CONFIG ]; then #no config - set default values
	mkdir -p $WORKDIR 2> /dev/null
	DIR="$HOME" #default browser dir
	SOUND=Default
	SCREEN=Default
	FS=Default
	HWBUF=Default
	DBUF=Default
	SCAN=Default
	COLOR=Default
else
	. $CONFIG #read config file
fi

#get settings from main rom loader settings file, for theme settings and other stuff
export RCFILE=$HOME/.paloader/paloader.cfg
if [ -f "$RCFILE" ];then
	 . "$RCFILE"
fi
}

#####     F U N C T I O N S     ######
{
set -a #export all functions

# get rom loader functions
. /usr/local/rom-loader/func/func_get_resolution 			#get screen res
. /usr/local/rom-loader/func/func_set_theme					# adjust font sizes based on screen res
. /usr/local/rom-loader/func/func_sanitise_romname		# clean up rom names to be searchable
. /usr/local/rom-loader/func/func_build_chooser_list 		# needs SYSTEM and EXT_LIST set & exported near top of this file
. /usr/local/rom-loader/func/func_browser_go_to_dir		# file browsing
. /usr/local/rom-loader/func/func_browser_change_dir	# file browsing
. /usr/local/rom-loader/func/func_set_custom_config	# get the custom cfg for the current rom
. /usr/local/rom-loader/func/func_popup							# popup dialog when user lodas up a rom
. /usr/local/rom-loader/func/func_file_check 					# set boxart ($IMG_FILE), desc file,
. /usr/local/rom-loader/func/func_set_gui_height			# fill screen height
. /usr/local/rom-loader/func/func_kill_rejoystick				# a nicer way to end joypad navigation control
#for bottom panel
. /usr/local/rom-loader/func/func_get_rom_descr 			# needs $CHOOSER, sets $desc_file
. /usr/local/rom-loader/func/func_set_rom_descr 			# needs $DIR$CHOOSER and $desc_file
. /usr/local/rom-loader/func/func_edit_rom_details 		#needs $romname
. /usr/local/rom-loader/func/func_get_rom_boxart 		#needs $romname, sets $IMG_FILE
. /usr/local/rom-loader/func/func_set_rom_boxart 		#needs $IMG_FILE

write_config () {
	#write all variable values to config file
	echo '#pafbzx config file' > $CONFIG
	echo DIR="\"$DIR\""	 >> $CONFIG
	echo SOUND="$SOUND" >> $CONFIG
	echo SCREEN="$SCREEN" >> $CONFIG
	echo FS="$FS" >> $CONFIG
	echo HWBUF="$HWBUF" >> $CONFIG
	echo DBUF="$DBUF" >> $CONFIG
	echo SCAN="$SCAN" >> $CONFIG
	echo COLOR="$COLOR" >> $CONFIG
	
	# here, we do 2 things: we get the custom config for any backends NOT being used, 
	# starting with first in list, goind down (see backend menus in Settings page), 
	# if a cfg for a non-enabled backend exists, that backend is used to auto load the rom with those custom settings
	# if no custom configs exist for non used backends, get the custom config for the currently enabled backend
	# we do this so users can set custom settings AND emulators for each ROM..
	set_custom_config
	
}

execute (){
	export GTK2_RC_FILES="$HOME/.gtkrc-2.0"	#reset gtk-theme
	
	write_config #keep settings for next startup/next game, write to config file

	C="" 

	case $SOUND in
	Default) C="$C" ;;
	*) C="$C -${SOUND}" ;;
	esac

	case $SCREEN in
	Default) C="$C" ;;
	*) C="$C -$SCREEN" ;;
	esac

	case $FS in
	Default) C="$C" ;;
	true) C="$C -fs" ;;
	esac

	case $HWBUF in
	Default) C="$C" ;;
	true) C="$C -hw" ;;
	esac

	case $DBUF in
	Default) C="$C" ;;
	true) C="$C -db" ;;
	esac

	case $SCAN in
	Default) C="$C" ;;
	double) C="$C -ds" ;;
	single) C="$C -ss" ;;
	esac

	case $COLOR in
	Default) C="$C" ;;
	color) C="$C -color" ;;
	bw) C="$C -bw" ;;
	esac

	# enable joypad rom browsing
	rejoystick1cc --load --profile fbzx &>/dev/null
	rejoystick2cc --load --profile fbzx &>/dev/null
	unclutter -idle 1 -jitter 6 -reset -root &
	 
	 #this is the actual command
	 cd "$DIR"
	 mkdir -p /tmp/paloader
	 echo "fbzx $C \"$DIR$CHOOSER\"" > /tmp/paloader/${SELF}_cmd
	 . /tmp/paloader/${SELF}_cmd &> /tmp/paloader/${SELF}_cmd_output
	
	# enable joypad rom browsing
	rejoystick1cc --load --profile romloader &>/dev/null
	rejoystick2cc --load --profile romloader &>/dev/null
	killall -9 unclutter &>/dev/null

}

}

#####     P R O G R A M     ######
{

#define default directory in browser
echo "$DIR" > $WORKDIR/dir
ls -1p --group-directories-first "$DIR" > $WORKDIR/ls
browser_go_to_dir

#set default text in info-field
echo 'Select a valid ROM in the browser and execute' > $WORKDIR/info
# set the default puppy arcade box art
rm /root/.paloader/tmp/boxart.jpg &>/dev/null
ln -s /usr/share/paloader/romlists/boxart/default.jpg /root/.paloader/tmp/boxart.jpg

# set the height to full height of screen if run with -if/--fullscreen
set_gui_height

#define a unique gtk-theme. This can be built really fancy. See /usr/share/themes/DeepThought/gtk-2.0/gtkrc.
#Pmusic and Pburn uses this tecnique
cat "/root/.paloader/themes/${ZXSPEC_THEME:-$MAIN_THEME}" > /tmp/gtkrc

#get the screen res .. this will also set TITLESIZE and SUBTITELSIZE, 
# which are font sizes we update on the fly in theme files
get_resolution 
#now we update the font sizes based on current resolution
# set_theme will replace the font sizes in /tmp/gtkrc and then set the theme
set_theme

# auto run the given rom ($ROMFILE)
if [ -f "$ROMFILE" ];then #if rom was given
	# set the required vars to locate the rom
	export DIR="`dirname \"$ROMFILE\"`/"
	export CHOOSER="`basename \"$ROMFILE\"`"
	# load up the rom
	execute
	kill_rejoystick
	exit
fi

}

###### build gui #####
{
# get all arrays for combobox items
. /usr/local/rom-loader/combobox_arrays/`basename $0`

# create the file browsing gui stuff ... do it here cos gui_height and so has to be set first...
. /usr/local/rom-loader/func/func_build_chooser_gui
# usage:  build_chooser_gui $boxart_width $boxart_height
build_chooser_gui 280 200

#main gui
S='<window title="Puppy Arcade - ZX Spectrum loader (fbzx)" icon-name="gtk-execute" '$DECORATED' width-request="'$SCREEN_WIDTH'" height-request="'$SCREEN_HEIGHT'">
 <vbox>
  <notebook labels="ROMs|Settings|Help">

## E X E C U T E

 '$CHOOSER_GUI'

## S E T T I N G S

	<vbox>

	<frame     Display settings>
	  <hbox>

	  <text><label>"Fullscreen"</label></text>
	  <combobox width-request="100" tooltip-text="fullscreen or not">
	   <variable>FS</variable>
		'$FS_ITEMS'
	  </combobox>   
	  <text width-request="25"><label>""</label></text>
	  <text><label>"Screen Type"</label></text>
	  <combobox width-request="100" tooltip-text="Sets a type of display.. Can rotate, resize and other stuff.">
	   <variable>SCREEN</variable>
		'$SCREEN_ITEMS'
	  </combobox>   

	  </hbox>
	  <hbox>

	  <text><label>"Hardware Buffer"</label></text>
	  <combobox width-request="100" tooltip-text="HArdware buffer.. gives better performance, required better hardware.">
	   <variable>HWBUF</variable>
		'$HWBUF_ITEMS'
	  </combobox>   
	  <text width-request="15"><label>""</label></text>
	  <text><label>"Double Buffer"</label></text>
	  <combobox width-request="100" tooltip-text="Double buffering, makes things looks nicer">
	   <variable>DBUF</variable>
		'$DBUF_ITEMS'
	  </combobox>   

	  </hbox>
	  <hbox>

	  <text><label>"Scan type"</label></text>
	  <combobox width-request="100" tooltip-text="Double or single scan mode (emulates TV lines or not).. a bit like scanlines.">
	   <variable>SCAN</variable>
		'$SCAN_ITEMS'
	  </combobox>   
	  <text width-request="22"><label>""</label></text>
	  <text><label>"Colour mode"</label></text>
	  <combobox width-request="100" tooltip-text="Choose a colour or black and white display">
	   <variable>COLOR</variable>
		'$COLOR_ITEMS'
	  </combobox>   
	</hbox>
	</frame>

	<frame     Sound settings>

	  <hbox>

	  <text><label>"Sound"</label></text>
	  <combobox width-request="100" tooltip-text="Enable or disable sound.. ">
	   <variable>SOUND</variable>
		'$SOUND_ITEMS'
	  </combobox>   

	  </hbox>

	</frame>

	</vbox>

## H E L P
  <vbox>
	<edit can-focus="no" editable="false" indent="15">
		<variable>EDITOR</variable>
		<width>350</width><height>150</height>
		<default>"FBZX Help:
=======================
FBZX Controls:

The PC keyboard works exactly like the Spectrum keyboard 
(but only numbers and letters). ENTER key is Return, CAPS SHIFT 
is in both Shift keys, and SYMBOL SHIFT is in both Control keys. 

ESC 			Quit FBZX.

F1 				Main Menu

F2 				Load and save snapshots.

F3 				Choose a TAP/TZX file, rewind it, choose tape options

F4 				Choose the emulation type you want (48K, 128K, +2, 
					+2A or spanish 128K), the joystick, enable or disable 
					the AY emulation and enable or disable the Interface I.

F5 				Stops the tape when normal speed is selected.
					With fast speed, it does nothing.

F6 				Plays the tape when normal speed is selected. 
					With fast speed, it does nothing.

F7 				Choose a MDR file (microdrive), protect and unprotect it,
					and create a new (and empty) one.

F8 				Shows the keyboard layout, or insert POKE values

F9 				Toggles between fullscreen/windowed mode

F10 				Resets the spectrum.

F11 				Volume down.

F12 				Volume up.

If your system doesnt have function keys, you can use TAB plus 
keys 0 to 9 to emulate them (F11 is TAB and O, and F12 is TAB and P).
  
"</default>
	</edit>		
  </vbox>

 </notebook>

## B U T T O N S

	<hbox height-request="30">
		<button use-stock="true" label="gtk-save" tootlip-text="Save your emulator settings">
			<variable>SAVE_SETTINGS</variable>
			<action>write_config; Xdialog --title "Settings Saved" --msgbox "Settings saved to $CONFIG" 0 0</action>
		</button>
		<button use-stock="true" label="gtk-help" tooltip-text="View all usage options for this emulator">
		    <action>defaultbrowser /usr/local/fbzx/FBZX.html &</action>	
		</button>
		<button use-stock="true" label="gtk-quit" tooltip-text="Exit this frontend">
			<action>if [ "$FULLGUI" != "" ];then exec paloader -sk '$FSGUI' & sleep 0.6; fi</action>
			<action type="exit">EXIT_NOW</action>
		</button>
	</hbox>
 </vbox>
</window>'
}

### run gui ####
export pafbzx="`echo "$S" | sed -e 's/##.*//'`"  #I use double hash (##) for comments. Colors are defined as #FF0000
gtkdialog3 -p pafbzx $FULLSCREENGUI # $FULLSCREENGUI contains (or not) --class=jwm-maximized and must be defined in jwm configuration to get window maximized
unset pafbzx

# if NOT returning to the main menu ($FULLGUI=""), remove the rejoystick profile.. kill it to be safe... 
# and then we must use xdotool to quit the output of the joypad when rejoystick exits.. 
# if we dont do this, rejoystick/the joypad floods the next process/app/etc with a load of keypresses
if [ "$FULLGUI" = "" ];then
	kill_rejoystick
fi

exit 0
