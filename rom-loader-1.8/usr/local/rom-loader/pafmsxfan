#!/bin/sh

rejoystick1cc --load --profile romloader &>/dev/null
rejoystick2cc --load --profile romloader &>/dev/null

#make some shortcuts. Most for easy typing, but also for flexibility
export WORKDIR=$HOME/.paloader/tmp
export CONFIG=$HOME/.paloader/pafmsxfanrc
# set some vars as defaults
export FULLGUI=''
export FSGUI=''
export FULLSCREENGUI='';
export DECORATED='decorated="true"'

##
# for the build_chooser function, used by this script to browse files and dirs
export EXT_LIST="\.rom$|\.mx$|\.mx2$|\.msx$|\.msx2$"  # goes in a `grep -iE "$EXT_LIST"` command to filter out unwanted filetypes in build_chooser_list, keep only those listed
# get the guiname .. can use it to create game specific configs for each backend
export SELF="`basename "$0"`"
# $SYSTEM is used by func_build_chooser_list to choose the correct pupromdb file and descr dir
SYSTEM="`cat /root/.paloader/rclist.txt |grep -m1 \"|${SELF}$\" |cut -f1 -d'|'`" #example: fmsxfan or atari2600 or pce
#now we need to make it upper case
export SYSTEM="${SYSTEM^^}" # ... note "${SYSTEM,,}" would force lower case
export ROMFILE='' # the file to load up on program start
export ROMICON='cartridge_msx' # the icon file in /usr/share/pixmaps/ to use for this system

# set command line options
while [ $# != 0 ]; do
   I=1
   while [ $I -le `echo $# | wc -c` ]; do
      case $1 in
         -rom) [ -f "$2" ] && ROMFILE="$2" || ROMFILE='' ;;
         -fgui) FULLGUI="true";;
         -f|--fullscreen) FSGUI="-f "; FULLSCREENGUI="--class=jwm-maximized"; DECORATED="decorated=\"false\"";;
         -v|--version)echo "pafmsxfan $VERSION"; exit;;
         -h|--help)
echo 'Usage: pafmsxfan [OPTION]

Options
  -romfile	    Load up the given rom on program startup (give full path)
  -f    Start the rom loader GUI in fullscreen
  -h    Show this help message'; exit;;
         #if the given option is a file, assign to $ROMFILE, we will autoload it
         *) [ -f "$1" ] && ROMFILE="$1";;
      esac
      shift
      I=$[$I+1]
   done
done


#check if config exists
if [ ! -f $CONFIG ]; then #no config - set default values
	mkdir -p $WORKDIR 2> /dev/null
	DIR=$HOME #default browser dir
	MSXSYSTEM=Default
	RAM=Default
	VRAM=Default
	NTSC=Default
	PRINTERFILE=Default
	SERIALFILE=Default
	AUTOFIRE=Default
	JOY=Default
	SOUND=Default
	SOUNDFILE=Default
else
	. $CONFIG #read config file
fi

#get settings from main rom loader settings file, for theme settings and other stuff
export RCFILE=$HOME/.paloader/paloader.cfg
if [ -f "$RCFILE" ];then
	 . "$RCFILE"
fi

#####     F U N C T I O N S     ######

set -a #export all functions

# get rom loader functions
. /usr/local/rom-loader/func/func_get_resolution 			#get screen res
. /usr/local/rom-loader/func/func_set_theme					# adjust font sizes based on screen res
. /usr/local/rom-loader/func/func_sanitise_romname		# clean up rom names to be searchable
. /usr/local/rom-loader/func/func_build_chooser_list 		# needs SYSTEM and EXT_LIST set & exported near top of this file
. /usr/local/rom-loader/func/func_browser_go_to_dir		# file browsing
. /usr/local/rom-loader/func/func_browser_change_dir	# file browsing
. /usr/local/rom-loader/func/func_set_custom_config	# get the custom cfg for the current rom
. /usr/local/rom-loader/func/func_popup							# popup dialog when user lodas up a rom
. /usr/local/rom-loader/func/func_file_check 					# set boxart ($IMG_FILE), desc file,
. /usr/local/rom-loader/func/func_set_gui_height			# fill screen height
. /usr/local/rom-loader/func/func_kill_rejoystick				# a nicer way to end joypad navigation control
#for bottom panel
. /usr/local/rom-loader/func/func_get_rom_descr 			# needs $CHOOSER, sets $desc_file
. /usr/local/rom-loader/func/func_set_rom_descr 			# needs $DIR$CHOOSER and $desc_file
. /usr/local/rom-loader/func/func_edit_rom_details 		#needs $romname
. /usr/local/rom-loader/func/func_get_rom_boxart 		#needs $romname, sets $IMG_FILE
. /usr/local/rom-loader/func/func_set_rom_boxart 		#needs $IMG_FILE

write_config () {
	#write all variable values to config file
	echo '#PAfmsxfan config file' > $CONFIG
	echo DIR="\"$DIR\"" >> $CONFIG
	echo MSXSYSTEM="$MSXSYSTEM" >> $CONFIG
	echo RAM="$RAM" >> $CONFIG
	echo VRAM="$VRAM" >> $CONFIG
	echo NTSC="$NTSC" >> $CONFIG
	echo PRINTERFILE="$PRINTERFILE" >> $CONFIG
	echo SERIALFILE="$SERIALFILE" >> $CONFIG
	echo AUTOFIRE="$AUTOFIRE" >> $CONFIG
	echo JOY="$JOY" >> $CONFIG
	echo SOUND="$SOUND" >> $CONFIG
	echo SOUNDFILE="$SOUNDFILE" >> $CONFIG

	# here, we do 2 things: we get the custom config for any backends NOT being used, 
	# starting with first in list, goind down (see backend menus in Settings page), 
	# if a cfg for a non-enabled backend exists, that backend is used to auto load the rom with those custom settings
	# if no custom configs exist for non used backends, get the custom config for the currently enabled backend
	# we do this so users can set custom settings AND emulators for each ROM..
	set_custom_config
	
}

execute (){
	export GTK2_RC_FILES="$HOME/.gtkrc-2.0"	#reset gtk-theme
	write_config #keep settings for next startup

	case $MSXSYSTEM in 
	Default|auto-detect) echo '' ;;
	*) C="-${MSXSYSTEM}" ;;
	esac
	
	case $RAM in 
	Default) echo '' ;;
	*) C="$C -ram ${RAM}" ;;
	esac
	
	case $VRAM in 
	Default) echo '' ;;
	*) C="$C -vram ${VRAM}" ;;
	esac
	
	case $NTSC in 
	Default|auto-detect) echo '' ;;
	true) C="$C -ntsc" ;;
	false) C="$C -pal" ;;
	esac
	
	case $PRINTERFILE in 
	Default|none) echo '' ;;
	*) C="$C -printer \"${PRINTERFILE}\"" ;;
	esac
	
	case $SERIALFILE in 
	Default|none) echo '' ;;
	*) C="$C -serial \"${SERIALFILE}\"" ;;
	esac
	
	case $AUTOFIRE in 
	Default) echo '' ;;
	true) C="$C -auto" ;;
	false) C="$C -noauto" ;;
	esac
	
	case $JOY in 
	Default) echo '' ;;
	*) C="$C  -joy ${JOY%,*} -joy ${JOY#*,}" ;;
	esac
	
	case $SOUND in 
	Default) echo '' ;;
	disabled) C="$C -sound 0 -nosound" ;;
	*) C="$C -sound ${SOUND}" ;;
	esac
	
	case $SOUNDFILE in 
	Default|none) echo '' ;;
	*) C="$C -logsnd \"${SOUNDFILE}\"" ;;
	esac
	
	# enable joypad rom browsing
	rejoystick1cc --load --profile fmsxfan &>/dev/null
	rejoystick2cc --load --profile fmsxfan &>/dev/null
	unclutter -idle 1 -jitter 6 -reset -root &

	#the actual, final command
	echo "fmsxfan $C -home \"$DIR\" \"$DIR$CHOOSER\""  > /tmp/paloader/${SELF}_cmd
	. /tmp/paloader/${SELF}_cmd &> /tmp/paloader/${SELF}_cmd_output &
	export MSXPID=$?
	
	#required to kill hanging allegro libs or something.... 
	#doesnt work right... but works ok - at lteast with this we can properly kill fmsxfan later ... 
	while `ps -e | grep fmsxfan`
	do
		sleep 1
	done
	#killall -9 fmsxfan &>/dev/null
	
	# enable joypad rom browsing
	rejoystick1cc --load --profile romloader &>/dev/null
	rejoystick2cc --load --profile romloader &>/dev/null
	killall -9 unclutter &>/dev/null

}

#####     P R O G R A M     ######

#define default directory in browser
echo "$DIR" > $WORKDIR/dir
ls -1p --group-directories-first "$DIR" > $WORKDIR/ls
browser_go_to_dir

#set default text in info-field
echo 'Select a valid game in the browser and execute' > $WORKDIR/info
# set the default puppy arcade box art
rm /root/.paloader/tmp/boxart.jpg &>/dev/null
ln -s /usr/share/paloader/romlists/boxart/default.jpg /root/.paloader/tmp/boxart.jpg

# set the height to full height of screen if run with -if/--fullscreen
set_gui_height

#define a unique gtk-theme. This can be built really fancy. See /usr/share/themes/DeepThought/gtk-2.0/gtkrc.
#Pmusic and Pburn uses this tecnique
cat "/root/.paloader/themes/${MSX_THEME:-$MAIN_THEME}" > /tmp/gtkrc

#get the screen res .. this will also set TITLESIZE and SUBTITELSIZE, 
# which are font sizes we update on the fly in theme files
get_resolution 
#now we update the font sizes based on current resolution
# set_theme will replace the font sizes in /tmp/gtkrc and then set the theme
set_theme

# auto run the given rom ($ROMFILE)
if [ -f "$ROMFILE" ];then #if rom was given
	# set the required vars to locate the rom
	export DIR="`dirname \"$ROMFILE\"`/"
	export CHOOSER="`basename \"$ROMFILE\"`"
	# load up the rom
	execute
	kill_rejoystick
	exit
fi

# get all arrays for combobox items
. /usr/local/rom-loader/combobox_arrays/`basename $0`

# create the file browsing gui stuff ... do it here cos gui_height and so has to be set first...
. /usr/local/rom-loader/func/func_build_chooser_gui
# usage:  build_chooser_gui $boxart_width $boxart_height
build_chooser_gui 280 200

# check for bios file
if [ ! -e "/usr/lib/games/msx/MSX.ROM" -o ! -e "/usr/lib/games/msx/MSX2.ROM" ];then
	. /usr/local/rom-loader/func/func_get_bios
	get_bios_msx
fi

#build gui
S='
<window title="Puppy Arcade - MSX loader (fmsxfan)" icon-name="gtk-execute" '$DECORATED' width-request="'$SCREEN_WIDTH'" height-request="'$SCREEN_HEIGHT'">
 <vbox>
  <notebook labels="ROMs|Settings|Help">


## E X E C U T E

 '$CHOOSER_GUI'

## S E T T I N G S 

  <vbox>

	<frame System options>
		<hbox>

			<text><label>System:</label></text>
			<combobox width-request="100">
				 <variable>MSXSYSTEM</variable>
				 '$MSXSYSTEM_ITEMS'
			</combobox>
			<text width-request="20"><label>""</label></text>

			<text><label>NTSC or PAL:</label></text>
			<combobox width-request="100">
				 <variable>NTSC</variable>
				 '$NTSC_ITEMS'
			</combobox>
			<text width-request="20"><label>""</label></text>

			</hbox>
			<hbox>

			<text><label>RAM pages:</label></text>
			<combobox width-request="100">
				 <variable>RAM</variable>
				 '$RAM_ITEMS'
			</combobox>
			<text width-request="20"><label>""</label></text>

			<text><label>VRAM pages:</label></text>
			<combobox width-request="100">
				 <variable>VRAM</variable>
				 '$VRAM_ITEMS'
			</combobox>
			<text width-request="20"><label>""</label></text>

			</hbox>
			<hbox>

				<text><label>Print to file:</label></text>
				<combobox width-request="100">
					 <variable>PRINTERFILE</variable>
					 '$PRINTERFILE_ITEMS'
				</combobox>
			<text width-request="20"><label>""</label></text>

				<text><label>Serial to file:</label></text>
				<combobox width-request="100">
					 <variable>SERIALFILE</variable>
					 '$SERIALFILE_ITEMS'
				</combobox>
			<text width-request="20"><label>""</label></text>

			</hbox>

		</frame>
		<frame Joypad options>

			<hbox>

				<text><label>Joypad type:</label></text>
				<combobox width-request="100" tooltip-text="Select joystick types [0,0]:
	(two options can be present)
	0 - No joystick
	1 - Normal joystick
	2 - Mouse in joystick mode
	3 - Mouse in real mode
	">
					 <variable>JOY</variable>
					 '$JOY_ITEMS'
				</combobox>
			<text width-request="45"><label>""</label></text>

				<text><label>Autofire:</label></text>
				<combobox width-request="100">
					 <variable>AUTOFIRE</variable>
					 '$AUTOFIRE_ITEMS'
				</combobox>
			<text width-request="20"><label>""</label></text>

			</hbox>

		</frame>
		<frame Sound options>

			<hbox>

				<text><label>Sound:</label></text>
				<combobox width-request="100">
					 <variable>SOUND</variable>
					 '$SOUND_ITEMS'
				</combobox>
			<text width-request="15"><label>""</label></text>

				<text><label>Sound to File:</label></text>
				<combobox width-request="100">
					 <variable>SOUNDFILE</variable>
					 '$SOUNDFILE_ITEMS'
				</combobox>
			<text width-request="20"><label>""</label></text>

			</hbox>

		</frame>

	</vbox>

## H E L P
  <vbox>
	<edit can-focus="no" editable="false" indent="15">
		<variable>EDITOR</variable>
		<width>350</width><height>150</height>
		<default>"fmsxfan Help:

Player 1 Controls :

Up				up
Down			down
Left				left
Right			right

R Control		button1	
R Alt			button2

Emulator controls:

F1 				Pause/Restart

F12 				Quit

"</default>
	</edit>		
  </vbox>

</notebook>


## B U T T O N S

	<hbox>
		<button use-stock="true" label="gtk-save" tootlip-text="Save your emulator settings">
			<variable>SAVE_SETTINGS</variable>
			<action>write_config; Xdialog --title "Settings Saved" --msgbox "Settings saved to $CONFIG" 0 0</action>
		</button>
		<button use-stock="true" label="gtk-help" tooltip-text="View all usage options for this emulator">
		    <action>defaulttexteditor /usr/share/doc/fmsxfan/readme.txt &</action>	
		</button>
		<button use-stock="true" label="gtk-quit" tooltip-text="Exit this frontend">
			<action>killall -9 fmsxfan &>/dev/null; kill -9 $MSXPID &>/dev/null</action>
			<action>if [ "$FULLGUI" != "" ];then paloader -sk '$FSGUI' & sleep 0.6; fi</action>
			<action type="exit">EXIT_NOW</action>
		</button>
	</hbox>
 </vbox>
</window>'

export pafmsxfan="`echo "$S" | sed -e 's/##.*//'`"  #I use double hash (##) for comments. Colors are defined as #FF0000
gtkdialog3 -p pafmsxfan $FULLSCREENGUI # $FULLSCREENGUI contains (or not) --class=jwm-maximized and must be defined in jwm configuration to get window maximized
unset pafmsxfan

# if NOT returning to the main menu ($FULLGUI=""), remove the rejoystick profile.. kill it to be safe... 
# and then we must use xdotool to quit the output of the joypad when rejoystick exits.. 
# if we dont do this, rejoystick/the joypad floods the next process/app/etc with a load of keypresses
if [ "$FULLGUI" = "" ];then
	kill_rejoystick
fi

killall -9 fmsxfan &>/dev/null
kill -9 $MSXPID &>/dev/null
exit 0
